/*
  __                            _
 / _|__      ____      __  ___ | |__    ___ __  __
| |_ \ \ /\ / /\ \ /\ / / / _ \| '_ \  / _ \\ \/ /
|  _| \ V  V /  \ V  V / |  __/| |_) ||  __/ >  <
|_|    \_/\_/    \_/\_/   \___||_.__/  \___|/_/\_\

The source code `fw.webex.example.tools.tlpp` is based on more detailed and feature-rich sources:
    `dna.tech.mainexec.tlpp`
   ,`dna.tech.txteditmemo.tlpp`
   ,`dna.tech.sqltools.tlpp`
- and implements part of the functionalities present in these.

Released to Public Domain.
--------------------------------------------------------------------------------------
*/

namespace FWWebEx

#include "fw.webex.th"

#define __PARAM_CLIENT_ID__ 1
#define __PARAM_CLIENT_SECRET__ 2
#define __PARAM_USER_NAME__ 3
#define __PARAM_PASSWORD__ 4
#define __PARAM_REST_URL__ 5
#define __PARAM_USE_OAUTH2__ 6
#define __PARAM_REST_URL_OAUTH2__ 7
#define __PARAM_APPROOT_URI__ 8

static __cUserID as character
static __cClientSecret as character
static __cUserName as character
static __cUserPassWord as character

class FWExampleTools

    static method Execute(bExecute as codeblock,cTitle as character,lPrepareEnvironment as logical,lChangeCompanyAndBranch as logical) as variant
    static method HtmlFileShow(cHTML as character,cTitle as character,cHTMLFile as character,bJSToAdvPL as codeblock,bCallBack as codeblock,cCallBackActRet as character) as variant
    static method GetRESTCredential(cUSR as character,cPDW as character,cRESTURL as character,lUseOAuth2 as logical) as logical
    static method ChangeCompanyAndBranch(cCompany as character,cBranch as character,lFirstAccess as logical,cStack as character)

    static method NoCheckUri() as array
    static method ValidaToken(cToken,cPath) as logical
    static method ParamsProvider() as json

    static method GetClientID(cUserID as character) as character
    static method GetClientSecret(cClientSecret as character) as character
    static method GetUserName(cUserName as character) as character
    static method GetUserPassWord(cUserPassWord as character) as character
    static method GetAuthorization(cUSR as character,cPDW as character,cRESTURLOAuth2 as character) as json

    //https://startbootstrap.com/template/sb-admin
    static method SBAdminCheck() as logical

endclass

static method Execute(bExecute,cTitle,lPrepareEnvironment,lChangeCompanyAndBranch) class FWExampleTools

    local bInit as codeblock

    local cEmp as character
    local cFil as character

    local lMainWnd as logical

    local oMainBmp as object
    local oMainPanel as object

    paramtype 1 var bExecute as block
    paramtype 2 var cTitle as character optional default ProcName(1)
    paramtype 3 var lPrepareEnvironment as logical optional default .F.
    paramtype 4 var lChangeCompanyAndBranch as logical optional default .F.

    private lRedefineBottom as logical

    bInit:={||;
         if(lChangeCompanyAndBranch,FWExampleTools():ChangeCompanyAndBranch(@cEmp,@cFil,.T.,ProcName()),nil);
        ,Eval(bExecute);
    }

    lMainWnd:=(Type("oMainWnd")=="O")
    if (!lMainWnd)
        if (lPrepareEnvironment)
            OpenSM0()
            SM0->(dbGoTop())
            cEmp:=SM0->M0_CODIGO
            cFil:=SM0->M0_CODFIL
            FWMsgRun(nil,{||RPCSetEnv(cEmp,cFil,GetEnvServer())},"Wait...","Preparing environment")
            cEmp:=cEmpAnt
            cFil:=cFilAnt
            if ((Type("__cInternet")=="C").and.(__cInternet=="AUTOMATICO"))
                //Redefine modo Blind
                __cInternet:=NIL
            endif
        endif
            if (WebApp():WebAgentIsConnected())
                private oMainWnd as object
                lRedefineBottom:=.T.
                DEFINE WINDOW oMainWnd FROM 00,00 TO 1024,768 TITLE cTitle
                    @ 000,000 MSPANEL oMainPanel OF oMainWnd
                    oMainPanel:Align:=CONTROL_ALIGN_ALLCLIENT
                    @ 000,000 BITMAP oMainBmp RESNAME "DNA_TECH_LOGO_BLACK_PANTER" SIZE 1024,1024 BORDER OF oMainPanel PIXEL
                    oMainBmp:Align:=CONTROL_ALIGN_ALLCLIENT
                    oMainBmp:SetCSS("{background-size: 100% 100%;}")
                ACTIVATE WINDOW oMainWnd MAXIMIZED ON INIT (Eval(bInit),oMainWnd:End())
                FreeObj(@oMainBmp)
                FreeObj(@oMainPanel)
                FreeObj(@oMainWnd)
            else
                ApMsgAlert("WebAgent is not connected",ProcName())
            endif
        if (lPrepareEnvironment)
            RPCClearEnv()
        endif
    else
        lRedefineBottom:=(FWIsInCallStack("u_FWWebExExample_000"))
        cEmp:=cEmpAnt
        cFil:=cFilAnt
        if (WebApp():WebAgentIsConnected())
            Eval(bInit)
        else
            ApMsgAlert("WebAgent is not connected",ProcName())
        endif
    endif

return

static method HtmlFileShow(cHTML,cTitle,cHTMLFile,oTWebChannel,bJSToAdvPL,bCallBack,cCallBackActRet) class FWExampleTools

    local aButtons as array

    local bErrorBlock as codeblock

    local cHTMLFileTmpFile as character
    local cHTMLFileServer as character
    local cHTMLFileNavigate as character

    local cSPPDrive as character
    local cSPPPath as character
    local cSPPFile as character
    local cSPPExt as character

    local jButtons as json

    local lAbrir as logical
    local lIsDark:=WebApp():ThemeIsDark() as logical
    local lHasTheme as logical
    local lTWebChannel as logical

    local nTop as numeric
    local nLeft as numeric
    local nBottom as numeric
    local nRight as numeric

    local oDlg as object
    local oGrp as object

    local oError as object
    local oTheme as object

    local oTWebEngine as object

    local oFWDefSize as object

    paramtype 1 var cHTML as character
    paramtype 2 var cTitle as character
    paramtype 3 var cHTMLFile as character
    paramtype 3 var oTWebChannel as object class TWEBCHANNEL optional
    paramtype 4 var bJSToAdvPL as block optional
    paramtype 5 var bCallBack as block optional
    paramtype 6 var cCallBackActRet as character optional

    lTWebChannel:=(ValType(oTWebChannel)=="O")

    begin sequence

        jButtons:=JSONObject():New()

        aButtons:=array(0)
        aAdd(aButtons,{"&Sair",{||oDlg:End()},OemToAnsi("Sair"),OemtoAnsi("Sair")})
        aAdd(aButtons,{"&Print",{||oTWebEngine:Print()},OemToAnsi("Print"),OemtoAnsi("Print")})
        aAdd(aButtons,{"Print PD&F",{||oTWebEngine:PrintPDF()},OemToAnsi("Print PDF"),OemtoAnsi("Print PDF")})

        lAbrir:=file(cHTMLFile)

        if (lAbrir)
            lAbrir:=(WebApp():WebAgentIsConnected())
            if (WebApp():WebAgentIsConnected())
                bErrorBlock:=ErrorBlock({|oError|Break(oError)})
                begin sequence
                    //CpyF2Web(<cOrigem>,[lIsUserDiskDir],[lCompactCopy],[lChangeCase],[lUnZipFile])
                    cHTMLFileNavigate:=CpyF2Web(cHTMLFile,.T.,.T.,.F.,.F.)
                recover
                    begin sequence
                        //CpyF2Web(<cOrigem>,[lIsUserDiskDir],[lCompactCopy],[lChangeCase],[lUnZipFile])
                        cHTMLFileNavigate:=CpyF2Web(cHTMLFile,.F.,.T.,.F.,.F.)
                    end sequence
                end sequence
                ErrorBlock(bErrorBlock)
                if ((Empty(cHTMLFileNavigate)).and.(lIsDir(FWWEBEX_WEB_TMP_PATH)))
                    splitPath(cHTMLFile,@cSPPDrive,@cSPPPath,@cSPPFile,@cSPPExt)
                    cHTMLFileServer:=FWWEBEX_WEB_TMP_PATH
                    cHTMLFileServer+=cSPPFile
                    cHTMLFileServer+=cSPPExt
                    cHTMLFileNavigate:=cHTMLFileServer
                    bErrorBlock:=ErrorBlock({|oError|Break(oError)})
                    begin sequence
                        //CpyF2Web(<cOrigem>,[lIsUserDiskDir],[lCompactCopy],[lChangeCase],[lUnZipFile])
                        cHTMLFileNavigate:=CpyF2Web(cHTMLFileNavigate,.T.,.T.,.F.,.F.)
                    recover
                        begin sequence
                            //CpyF2Web(<cOrigem>,[lIsUserDiskDir],[lCompactCopy],[lChangeCase],[lUnZipFile])
                            cHTMLFileNavigate:=CpyF2Web(cHTMLFileNavigate,.F.,.T.,.F.,.F.)
                        recover
                            cHTMLFileNavigate:=cHTMLFileServer
                        end sequence
                    end sequence
                    ErrorBlock(bErrorBlock)
                endif
                splitPath(cHTMLFile,@cSPPDrive,@cSPPPath,@cSPPFile,@cSPPExt)
                cHTMLFileTmpFile:=GetTempPath()
                cHTMLFileTmpFile+=cSPPFile
                cHTMLFileTmpFile+=cSPPExt
                __CopyFile(cHTMLFile,cHTMLFileTmpFile)
                aAdd(aButtons,{"&Abrir",{||ShellExecute("open",cHTMLFileTmpFile,"","",SW_SHOWMAXIMIZED)},OemToAnsi("Abir"),OemtoAnsi("Abir")})
            endif
        endif

        oFWDefSize:=FWDefSize():New(.F.,.F.)
        oFWDefSize:lLateral:=.F.
        oFWDefSize:AddObject("TWebEngine",100,95,.T.,.T.)
        oFWDefSize:AddObject("ButtonActions",100,05,.F.,.F.)

        oFWDefSize:Process()

        if (oFWDefSize:aWindSize[3]==0)
            nTop:=0
            nLeft:=0
            nBottom:=530
            nRight:=1330
        else
            nTop:=oFWDefSize:aWindSize[1]
            nLeft:=oFWDefSize:aWindSize[2]
            nBottom:=oFWDefSize:aWindSize[3]
            nRight:=oFWDefSize:aWindSize[4]
        endif

        if (Type("lRedefineBottom")!="L")
            private lRedefineBottom:=.T. as logical
        endif

        if (lRedefineBottom)
            nBottom-=15
        endif

        DEFINE MSDIALOG oDlg TITLE cTitle FROM nTop,nLeft TO nBottom,nRight OF GetWndDefault() STATUS PIXEL

            if (oFWDefSize:aWindSize[3]>0)
                nTop:=oFWDefSize:GetDimension("TWebEngine","LININI")
                nLeft:=oFWDefSize:GetDimension("TWebEngine","COLINI")
                nBottom:=oFWDefSize:GetDimension("TWebEngine","LINEND")
                nRight:=oFWDefSize:GetDimension("TWebEngine","COLEND")
                nTop-=5
                nBottom+=1
                nRight-=5
                if (lRedefineBottom)
                    nBottom-=25
                endif
            endif

            if (!lTWebChannel)
                oTWebChannel:=TWebChannel():New()
                oTWebChannel:Connect()
            endif

            if (!oTWebChannel:lConnected)
                oTWebChannel:Connect()
                if (!oTWebChannel:lConnected)
                    ApMsgInfo("Falha ao Conectar ao WebSocket",ProcName())
                    break
                endif
            endif

            if (ValType(bJSToAdvPL)=="B")
                oTWebChannel:bJSToAdvPL:=bJSToAdvPL
            endif

            if (ValType(bCallBack)=="B")
                oTWebChannel:bSetGet:=bCallBack
            endif

            if (ValType(cCallBackActRet)=="C")
                oTWebChannel:cMSG:=cCallBackActRet
            endif

            oTWebEngine:=TWebEngine():New(oDlg,nTop,nLeft,nRight,nBottom,/*cURL*/,oTWebChannel:nPort)
            oTWebEngine:Align:=CONTROL_ALIGN_ALLCLIENT
            WebApp():SetTWebEngine(oTWebEngine)

            nTop:=oFWDefSize:GetDimension("ButtonActions","LININI")
            nBottom:=oFWDefSize:GetDimension("ButtonActions","LINEND")

            if (oFWDefSize:aWindSize[3]>0)
                if (lRedefineBottom)
                    nTop-=25
                    nBottom-=25
                endif
                nTop-=3
                nRight+=3
            endif

            if (lIsDark)
                @ nTop,03 GROUP oGrp TO nBottom+2,nRight PROMPT "" OF oDlg PIXEL
            else
                @ nTop,03 GROUP oGrp TO nBottom+2,nRight PROMPT "" OF oDlg COLOR 0,16777215 PIXEL
            endif

            nTop+=15
            nRight+=5

            try
                oTheme:=totvs.framework.css.ProtheusTheme():New()
                lHasTheme:=.T.
            catch oError
                lHasTheme:=.F.
                FreeObj(@oError)
            endtry

            //Botoes (da direita pra a esquerda)
            @ nTop,(nRight)-((50*1)+06) BUTTON jButtons["1"] PROMPT aButtons[1][1] SIZE 50,08 OF oGrp ACTION Eval(aButtons[1][2]) PIXEL
            if (lHasTheme)
                jButtons["1"]:SetCSS(oTheme:getPrimaryButtonCSS())
            endif
            @ nTop,(nRight)-((50*2)+09) BUTTON jButtons["2"] PROMPT aButtons[2][1] SIZE 50,08 OF oGrp ACTION Eval(aButtons[2][2]) PIXEL
            if (lHasTheme)
                jButtons["2"]:SetCSS(oTheme:getPrimaryButtonCSS())
            endif
            @ nTop,(nRight)-((50*3)+12) BUTTON jButtons["3"] PROMPT aButtons[3][1] SIZE 50,08 OF oGrp ACTION Eval(aButtons[3][2]) PIXEL
            if (lHasTheme)
                jButtons["3"]:SetCSS(oTheme:getPrimaryButtonCSS())
            endif
            if (lAbrir)
                @ nTop,(nRight)-((50*4)+15) BUTTON jButtons["4"] PROMPT aButtons[4][1] SIZE 50,08 OF oGrp ACTION Eval(aButtons[4][2]) PIXEL
                if (lHasTheme)
                    jButtons["4"]:SetCSS(oTheme:getPrimaryButtonCSS())
                endif
            endif

            oDlg:lEscClose:=.F.

            oTWebEngine:Navigate(cHTMLFileNavigate)

            oDlg:lCentered:=(!lRedefineBottom)

        ACTIVATE MSDIALOG oDlg

        if ((!lTWebChannel).and.(valType(oTWebChannel)=="O"))
            oTWebChannel:Disconnect()
        endif

        if ((!Empty(cHTMLFile)).and.(File(cHTMLFile)))
            fErase(cHTMLFile)
        endif

        if ((!Empty(cHTMLFileNavigate)).and.(File(cHTMLFileNavigate)))
            fErase(cHTMLFileNavigate)
        endif

        if ((!Empty(cHTMLFileServer)).and.(File(cHTMLFileServer)))
            fErase(cHTMLFileServer)
        endif

        if ((!Empty(cHTMLFileTmpFile)).and.(File(cHTMLFileTmpFile)))
            fErase(cHTMLFileTmpFile)
        endif

    end sequence

    FWFreeArray(@aButtons)

    FreeObj(@oGrp)
    FreeObj(@oDlg)
    FreeObj(@oTheme)
    FreeObj(@jButtons)
    FreeObj(@oFWDefSize)

    FreeObj(@oTWebEngine)
    if (!lTWebChannel)
        FreeObj(@oTWebChannel)
    endif

    DelClassIntF()

return

static method GetRESTCredential(cUSR,cPDW,cRESTURL,cRESTURLOAuth2,jGetAuthorization,lUseOAuth2) class FWExampleTools

    local aParamBox:=Array(0) as array
    local aParamRet:=Array(0) as array

    local cAppRootURI as character

    local cClientID as character
    local cClientSecret as character
    local cSRVIniName:=GetSrvIniName() as character

    local lGetRESTCredential as logical

    paramtype 1 var cUSR as character optional default AllTrim(GetPvProfString("FWWEBEX","UserName","",cSRVIniName))
    paramtype 2 var cPDW as character optional default AllTrim(GetPvProfString("FWWEBEX","Password","",cSRVIniName))
    paramtype 3 var cRESTURL as character optional default AllTrim(GetPvProfString("FWWEBEX","RestURL","",cSRVIniName))
    paramtype 4 var cRESTURLOAuth2 as character optional default AllTrim(GetPvProfString("FWWEBEX","OAuth2URL","",cSRVIniName))
    paramtype 5 var jGetAuthorization as json optional
    paramtype 6 var lUseOAuth2 as logical optional default .F.

    cAppRootURI:=AllTrim(GetPvProfString("FWWEBEX","AppRootURI","",cSRVIniName))
    cAppRootURI:=PadR(cAppRootURI,200)

    cClientID:=AllTrim(GetPvProfString("FWWEBEX","ClientID","",cSRVIniName))
    if (Empty(cClientID))
        cClientID:=__cUserID
    endif
    cClientID:=PadR(cClientID,100)

    cClientSecret:=AllTrim(GetPvProfString("FWWEBEX","ClientSecret","",cSRVIniName))
    if (Empty(cClientSecret))
        cClientSecret:=AllTrim(GetPvProfString("FWWEBEX","Password","",cSRVIniName))
    endif
    cClientSecret:=PadR(cClientSecret,100)

    if (Empty(cUSR))
        cUSR:=AllTrim(GetPvProfString("FWWEBEX","UserName","",cSRVIniName))
    endif
    cUSR:=PadR(cUSR,100)
    if (Empty(cPDW))
        cPDW:=AllTrim(GetPvProfString("FWWEBEX","Password","",cSRVIniName))
    endif

    cPDW:=PadR(cPDW,100)
    if (Empty(cRESTURL))
        cRESTURL:=AllTrim(GetPvProfString("FWWEBEX","RestURL","",cSRVIniName))
    endif
    cRESTURL:=PadR(cRESTURL,200)

    if (Empty(cRESTURLOAuth2))
        cRESTURLOAuth2:=AllTrim(GetPvProfString("FWWEBEX","OAuth2URL","",cSRVIniName))
    endif
    cRESTURLOAuth2:=PadR(cRESTURLOAuth2,200)

    begin sequence

        SaveInter()
            MV_PAR06:=.F.
            aAdd(aParamBox,{1,"ClientID",cClientID,"@","NaoVazio()","","AllWaysTrue()",100,.T.})
            aAdd(aParamBox,{1,"ClientSecret",cClientSecret,"@","NaoVazio()","","AllWaysTrue()",100,.T.})
            aAdd(aParamBox,{1,"UserName",cUSR,"@","NaoVazio()","","AllWaysTrue()",100,.T.})
            aAdd(aParamBox,{1,"Password",cPDW,"@","NaoVazio()","","AllWaysTrue()",100,.T.})
            aAdd(aParamBox,{1,"URL REST",cRESTURL,"@","NaoVazio()","","AllWaysTrue()",200,.T.})
            aAdd(aParamBox,{4,"OAuth2",MV_PAR06,"",100,"AllWaysTrue()",.F.})
            aAdd(aParamBox,{1,"URL REST OAuth2",cRESTURLOAuth2,"@","IF(MV_PAR06,NaoVazio(),AllWaysTrue())","","MV_PAR06",200,.T.})
            aAdd(aParamBox,{1,"APPRoot URI",cAppRootURI,"@","NaoVazio()","","AllWaysTrue()",200,.T.})
            lGetRESTCredential:=ParamBox(@aParamBox,"Selecione os Parametros",@aParamRet,nil,nil,.T.,nil,nil,nil,nil,.T.,.T.)
        RestInter()

        if (!lGetRESTCredential)
            break
        endif

        cClientID:=AllTrim(aParamRet[__PARAM_CLIENT_ID__])
        if (empty(cClientID))
            cClientID:=__cUserID
        endif
        if (!(Upper(cClientID)==Upper(AllTrim(GetPvProfString("FWWEBEX","ClientID","",cSRVIniName)))))
            WritePProString("FWWEBEX","ClientID",cClientID,cSRVIniName)
        endif
        FWExampleTools():GetClientID(cClientID)

        cClientSecret:=AllTrim(aParamRet[__PARAM_CLIENT_SECRET__])
        if (empty(cClientSecret))
            cClientSecret:=AllTrim(aParamRet[__PARAM_PASSWORD__])
        endif
        if (!(Upper(cClientSecret)==Upper(AllTrim(GetPvProfString("FWWEBEX","ClientSecret","",cSRVIniName)))))
            WritePProString("FWWEBEX","ClientSecret",cClientSecret,cSRVIniName)
        endif
        FWExampleTools():GetClientSecret(cClientSecret)

        cUSR:=AllTrim(aParamRet[__PARAM_USER_NAME__])
        if (!(Upper(cUSR)==Upper(AllTrim(GetPvProfString("FWWEBEX","UserName","",cSRVIniName)))))
            WritePProString("FWWEBEX","UserName",cUSR,cSRVIniName)
        endif
        FWExampleTools():GetUserName(cUSR)

        cPDW:=AllTrim(aParamRet[__PARAM_PASSWORD__])
        if (!(Upper(cPDW)==Upper(AllTrim(GetPvProfString("FWWEBEX","Password","",cSRVIniName)))))
            WritePProString("FWWEBEX","Password",cPDW,cSRVIniName)
        endif
        FWExampleTools():GetUserPassWord(cPDW)

        cRESTURL:=AllTrim(aParamRet[__PARAM_REST_URL__])
        if (Right(cRESTURL,1)!="/")
            cRESTURL+="/"
        endif
        if (!(Upper(cRESTURL)==Upper(AllTrim(GetPvProfString("FWWEBEX","RestURL","",cSRVIniName)))))
            WritePProString("FWWEBEX","RestURL",cRESTURL,cSRVIniName)
        endif

        lUseOAuth2:=aParamRet[__PARAM_USE_OAUTH2__]
        if (lUseOAuth2)
            cRESTURLOAuth2:=AllTrim(aParamRet[__PARAM_REST_URL_OAUTH2__])
            lUseOAuth2:=(!Empty(cRESTURLOAuth2))
            if (lUseOAuth2)
                if (Right(cRESTURLOAuth2,1)=="/")
                    cRESTURL:=SubStr(cRESTURLOAuth2,1,Len(cRESTURLOAuth2)-1)
                endif
                if (!(Upper(cRESTURLOAuth2)==Upper(AllTrim(GetPvProfString("FWWEBEX","OAuth2URL","",cSRVIniName)))))
                    WritePProString("FWWEBEX","OAuth2URL",cRESTURLOAuth2,cSRVIniName)
                endif
            endif
        endif

        cAppRootURI:=AllTrim(aParamRet[__PARAM_APPROOT_URI__])
        if (Right(cAppRootURI,1)!="/")
            cAppRootURI+="/"
        endif
        if (!(Upper(cAppRootURI)==Upper(AllTrim(GetPvProfString("FWWEBEX","AppRootURI","",cSRVIniName)))))
            WritePProString("FWWEBEX","AppRootURI",cAppRootURI,cSRVIniName)
        endif

        jGetAuthorization:=FWExampleTools():GetAuthorization(cUSR,cPDW,cRESTURLOAuth2)

    end sequence

    FWFreeArray(@aParamBox)
    FWFreeArray(@aParamRet)

return(lGetRESTCredential)

//https://tdn.totvs.com/display/tec/onAuthNoCheckUri
static method NoCheckUri() class FWExampleTools
    local aNoCheckUri:=array(0) as array
return(aNoCheckUri)

//https://tdn.totvs.com/pages/viewpage.action?pageId=579117088
static method ValidaToken(cToken,cPath) class FWExampleTools
return(.T.)

//https://tdn.totvs.com/display/tec/onAuthparams
static method ParamsProvider() class FWExampleTools
return(WebAuthorization():ParamsProvider())

static method GetClientID(cUserID) class FWExampleTools
    if (!Empty(cUserID))
        __cUserID:=cUserID
    endif
    if (empty(__cUserID))
        __cUserID:=GetPvProfString("FWWEBEX","ClientID","",GetSrvIniName())
    endif

return(__cUserID)

static method GetClientSecret(cClientSecret) class FWExampleTools
    if (!Empty(cClientSecret))
        __cClientSecret:=cClientSecret
    endif
    if (empty(__cClientSecret))
        __cClientSecret:=GetPvProfString("FWWEBEX","ClientSecret","",GetSrvIniName())
    endif
return(__cClientSecret)

static method GetUserName(cUserName) class FWExampleTools
    if (!Empty(cUserName))
        __cUserName:=cUserName
    endif
    if (empty(__cUserName))
        __cUserName:=GetPvProfString("FWWEBEX","UserName","",GetSrvIniName())
    endif
return(__cUserName)

static method GetUserPassWord(cUserPassWord) class FWExampleTools
    if (!Empty(cUserPassWord))
        __cUserPassWord:=cUserPassWord
    endif
    if (empty(__cUserPassWord))
        __cUserPassWord:=GetPvProfString("FWWEBEX","Password","",GetSrvIniName())
    endif
return(__cUserPassWord)

static method GetAuthorization(cUSR,cPDW,cRESTURLOAuth2) class FWExampleTools
    local jGetAuthorization as json
    paramtype 1 var cUSR as character optional default FWExampleTools():GetUserName()
    paramtype 2 var cPDW as character optional default FWExampleTools():GetUserPassWord()
    paramtype 3 var cRESTURLOAuth2 as character optional default ""
    jGetAuthorization:=WebAuthorization():GetAuthorization(cUSR,cPDW,cRESTURLOAuth2)
return(jGetAuthorization)

static method ChangeCompanyAndBranch(cCompany,cBranch,lFirstAccess,cStack) class FWExampleTools

    local aPBoxPrm as array
    local aPBoxRet as array
    local aModulos as array
    local aRetModName as array

    local bParamBoxOK as codeblock

    local aTCSQLToArr as array
    local aSXBDBStruct as array
    local aTCSQLSetFields as array

    local cEnvServer:=GetEnvServer() as character

    local cCSXBAlias as character
    local cBSXBAlias as character
    local cSXBAliasSeek as character
    local cSXBTableName as character
    local cSXBTableQuery as character

    local nSXBItem as numeric
    local nSXBItens as numeric
    local nSXBField as numeric
    local nSXBFields as numeric
    local nTCSQLToArr as numeric
    local nATModulo:=nModulo as numeric

    local lIsBlind:=IsBlind() as logical
    local lChangeOK as logical
    local lRPCTools as logical
    local lParamBox:=.T. as logical
    local lAllModulos:=.F. as logical

    local nPBox as numeric

    local oParamBoxLoad as object

    paramtype 1 var cCompany as character optional default cEmpAnt
    paramtype 2 var cBranch as character optional default cFilAnt
    paramtype 3 var lFirstAccess as logical optional default .F.
    paramtype 4 var cStack as character optional default "fwwebex_"+Lower(ProcName())

    if (!lIsBlind)

        //Reseta UniqueKey do Filtro SXB
        UniqueKey()

        //Cria a Consulta Padrao %SM0_C se nao existir
        SXB->(dbSetOrder(1))
        cCSXBAlias:=PadR("%SM0_C",Len(SXB->XB_ALIAS))
        cSXBAliasSeek:=cCSXBAlias
        if (SXB->(!dbSeek(cSXBAliasSeek,.F.)))
            cSXBAliasSeek:=PadR("YM0",Len(SXB->XB_ALIAS))
            aSXBDBStruct:=SXB->(dbStruct())
            nSXBFields:=Len(aSXBDBStruct)
            cSXBFields:=""
            for nSXBField:=1 to nSXBFields
                cSXBFields+=aSXBDBStruct[nSXBField][DBS_NAME]
                if (nSXBField<nSXBFields)
                    cSXBFields+=","
                endif
            next nSXBField
            if (SXB->(dbSeek(cSXBAliasSeek,.F.)))
                cSXBTableName:="SXB"+cEmpAnt+"0"
                beginContent var cSXBTableQuery
SELECT cSXBFields
  FROM cSXBTableName SXB
 WHERE SXB.D_E_L_E_T_<>'*'
   AND SXB.XB_ALIAS='cSXBAliasSeek'
                endContent
                cSXBTableQuery:=WebExHelper():StrReplace(;
                    cSXBTableQuery;
                    ,{;
                        "cSXBFields":cSXBFields;
                       ,"cSXBTableName":cSXBTableName;
                       ,"cSXBAliasSeek":cSXBAliasSeek;
                    };
                )
                aTCSQLToArr:=Array(0)
                aTCSQLSetFields:=Array(0)
                aEval(aSXBDBStruct,{|e|if(e[DBS_TYPE]!="C",aAdd(aTCSQLSetFields,e),nil)})
                nTCSQLToArr:=TCSQLToArr(cSXBTableQuery,@aTCSQLToArr,nil,aTCSQLSetFields,aSXBDBStruct)
                nSXBItens:=Len(aTCSQLToArr)
                for nSXBItem:=1 to nSXBItens
                    if (SXB->(RecLock("SXB",.T.)))
                        for nSXBField:=1 to nSXBFields
                            if (SXB->(aSXBDBStruct[nSXBField][DBS_NAME]=="XB_ALIAS"))
                                SXB->XB_ALIAS:=cCSXBAlias
                            elseif (SXB->((aSXBDBStruct[nSXBField][DBS_NAME]=="XB_CONTEM").and.(SXB->XB_TIPO=="6")))
                                SXB->(FieldPut(nSXBField,('SM0->(M0_CODFIL==MV_PAR02.AND.UniqueKey("M0_CODIGO","SM0"))')))
                            else
                                SXB->(FieldPut(nSXBField,aTCSQLToArr[nSXBItem][nSXBField]))
                            endif
                        next nSXBField
                        SXB->(MsUnLock())
                    endif
                next nSXBItem
                cSXBAliasSeek:=cCSXBAlias
                cSXBAliasSeek+="2"
                cSXBAliasSeek+="01"
                cSXBAliasSeek+="01"
                if (SXB->(!dbSeek(cSXBAliasSeek,.F.)))
                    if (SXB->(RecLock("SXB",.T.)))
                        SXB->XB_ALIAS:=cCSXBAlias
                        SXB->XB_TIPO:="2"
                        SXB->XB_SEQ:="01"
                        SXB->XB_COLUNA:="01"
                        SXB->XB_DESCRI:="Codigo"
                        SXB->XB_DESCSPA:="Codigo"
                        SXB->XB_DESCENG:="Code"
                        SXB->(MsUnLock())
                    endif
                endif
            endif
        endif

        //Cria a Consulta Padrao %SM0_B se nao existir
        SXB->(dbSetOrder(1))
        cBSXBAlias:=PadR("%SM0_B",Len(SXB->XB_ALIAS))
        cSXBAliasSeek:=cBSXBAlias
        if (SXB->(!dbSeek(cSXBAliasSeek,.F.)))
            cSXBAliasSeek:=PadR("NGD",Len(SXB->XB_ALIAS))
            aSXBDBStruct:=SXB->(dbStruct())
            nSXBFields:=Len(aSXBDBStruct)
            cSXBFields:=""
            for nSXBField:=1 to nSXBFields
                cSXBFields+=aSXBDBStruct[nSXBField][DBS_NAME]
                if (nSXBField<nSXBFields)
                    cSXBFields+=","
                endif
            next nSXBField
            if (SXB->(dbSeek(cSXBAliasSeek,.F.)))
                cSXBTableName:="SXB"+cEmpAnt+"0"
                beginContent var cSXBTableQuery
SELECT cSXBFields
  FROM cSXBTableName SXB
 WHERE SXB.D_E_L_E_T_<>'*'
   AND SXB.XB_ALIAS='cSXBAliasSeek'
                endContent
                cSXBTableQuery:=WebExHelper():StrReplace(;
                    cSXBTableQuery;
                    ,{;
                        "cSXBFields":cSXBFields;
                       ,"cSXBTableName":cSXBTableName;
                       ,"cSXBAliasSeek":cSXBAliasSeek;
                    };
                )
                aTCSQLToArr:=Array(0)
                aTCSQLSetFields:=Array(0)
                aEval(aSXBDBStruct,{|e|if(e[DBS_TYPE]!="C",aAdd(aTCSQLSetFields,e),nil)})
                nTCSQLToArr:=TCSQLToArr(cSXBTableQuery,@aTCSQLToArr,nil,aTCSQLSetFields,aSXBDBStruct)
                nSXBItens:=Len(aTCSQLToArr)
                for nSXBItem:=1 to nSXBItens
                    if (SXB->(RecLock("SXB",.T.)))
                        for nSXBField:=1 to nSXBFields
                            if (SXB->(aSXBDBStruct[nSXBField][DBS_NAME]=="XB_ALIAS"))
                                SXB->XB_ALIAS:=cBSXBAlias
                            else
                                SXB->(FieldPut(nSXBField,aTCSQLToArr[nSXBItem][nSXBField]))
                            endif
                        next nSXBField
                        SXB->(MsUnLock())
                    endif
                next nSXBItem
                cSXBAliasSeek:=cBSXBAlias
                cSXBAliasSeek+="2"
                cSXBAliasSeek+="01"
                cSXBAliasSeek+="01"
                if (SXB->(!dbSeek(cSXBAliasSeek,.F.)))
                    if (SXB->(RecLock("SXB",.T.)))
                        SXB->XB_ALIAS:=cBSXBAlias
                        SXB->XB_TIPO:="2"
                        SXB->XB_SEQ:="01"
                        SXB->XB_COLUNA:="01"
                        SXB->XB_DESCRI:="Codigo"
                        SXB->XB_DESCSPA:="Codigo"
                        SXB->XB_DESCENG:="Code"
                        SXB->(MsUnLock())
                    endif
                endif
                cSXBAliasSeek:=cBSXBAlias
                cSXBAliasSeek+="6"
                cSXBAliasSeek+="01"
                cSXBAliasSeek+="01"
                if (SXB->(!dbSeek(cSXBAliasSeek,.F.)))
                    SXB->(RecLock("SXB",.T.))
                else
                    SXB->(RecLock("SXB",.F.))
                endif
                SXB->XB_ALIAS:=cBSXBAlias
                SXB->XB_TIPO:="6"
                SXB->XB_SEQ:="01"
                SXB->XB_COLUNA:="01"
                SXB->XB_DESCRI:="Filtro da Consulta"
                SXB->XB_DESCSPA:="Filtro de Consulta"
                SXB->XB_DESCENG:="Look-up Filter"
                SXB->XB_CONTEM:="SM0->M0_CODIGO==MV_PAR01"
                SXB->(MsUnLock())
            endif
            FWFreeArray(@aTCSQLToArr)
            FWFreeArray(@aSXBDBStruct)
            FWFreeArray(@aTCSQLSetFields)
        endif

        aModulos:=Array(0)
        aRetModName:=RetModName(lAllModulos)
        nATModulo:=aScan(aRetModName,{|e|Right(e[2],Len(cModulo))==cModulo})
        aEval(aRetModName,{|e|aAdd(aModulos,e[2]+" : "+e[3])})

        aPBoxPrm:=Array(0)
        //01----------------------------------------------------------------------------------------------
        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        aPBoxPrm[nPBox][1]:=1//[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Company"//[2]:Descricao
        aPBoxPrm[nPBox][3]:=cCompany//[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"//[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="(UniqueKey(NIL,'SM0',.T.),ExistCpo('SM0',MV_PAR01,1))"//[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:=cCSXBAlias//[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="(UniqueKey(NIL,'SM0',.T.),AllWaysTrue())"//[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=(CalcFieldSize("C",SM0->(Len(M0_CODIGO)),0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2])+10)//[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.T.//[9]:Flag .T./.F. Parametro Obrigatorio ?
        //02----------------------------------------------------------------------------------------------
        aAdd(aPBoxPrm,Array(9))
        nPBox:=Len(aPBoxPrm)
        aPBoxPrm[nPBox][1]:=1//[1]:1 - MsGet
        aPBoxPrm[nPBox][2]:="Branch"//[2]:Descricao
        aPBoxPrm[nPBox][3]:=cBranch//[3]:String contendo o inicializador do campo
        aPBoxPrm[nPBox][4]:="@!"//[4]:String contendo a Picture do campo
        aPBoxPrm[nPBox][5]:="(UniqueKey(NIL,'SM0',.T.),ExistCpo('SM0',MV_PAR01+MV_PAR02,1))"//[5]:String contendo a validacao
        aPBoxPrm[nPBox][6]:=cBSXBAlias//[6]:Consulta F3
        aPBoxPrm[nPBox][7]:="(AllWaysTrue())"//[7]:String contendo a validacao When
        aPBoxPrm[nPBox][8]:=(CalcFieldSize("C",FWSizeFilial(),0,aPBoxPrm[nPBox][4],aPBoxPrm[nPBox][2])+10)//[8]:Tamanho do MsGet
        aPBoxPrm[nPBox][9]:=.T.//[9]:Flag .T./.F. Parametro Obrigatorio ?
        //03----------------------------------------------------------------------------------------------
        aAdd(aPBoxPrm,Array(8))
        nPBox:=Len(aPBoxPrm)
        aPBoxPrm[nPBox][1]:=3//[1]:3 - Radio
        aPBoxPrm[nPBox][2]:="Select the system module"//[2] : Descricao
        aPBoxPrm[nPBox][3]:=nATModulo //[3] : Numerico contendo a opcao inicial do Radio
        aPBoxPrm[nPBox][4]:=aModulos//[4] : Array contendo as opcoes do Radio
        aPBoxPrm[nPBox][5]:=150//[5] : Tamanho do Radio
        aPBoxPrm[nPBox][6]:="AllWaysTrue()"//[6] : Validacao
        aPBoxPrm[nPBox][7]:=.T. //[7] : Flag .T./.F. Parametro Obrigatorio ?
        aPBoxPrm[nPBox][8]:="AllWaysTrue()"//[8] : String contendo a validacao When

        saveInter()
            oParamBoxLoad:=ParamBoxLoad():New(cStack/*cLoad*/,.T./*lCanSave*/,.T./*lUserSave*/)
            MV_PAR01:=oParamBoxLoad:ParamLoad(aPBoxPrm,1,cCompany/*xDefault*/,.F./*lDefault*/)
            MV_PAR02:=oParamBoxLoad:ParamLoad(aPBoxPrm,2,cBranch/*xDefault*/,.F./*lDefault*/)
            bParamBoxOK:={||ExistCpo("SM0",MV_PAR01,1).and.ExistCpo("SM0",MV_PAR01+MV_PAR02,1)}
            lParamBox:=ParamBox(@aPBoxPrm,ProcName(),@aPBoxRet,bParamBoxOK/*bOk*/,/*aButtons*/,.T./*lCentered*/,/*nPosx*/,/*nPosy*/,/*oDlgWizard*/,oParamBoxLoad:GetParamLoad()/*cLoad*/,oParamBoxLoad:GetCanSave()/*lCanSave*/,oParamBoxLoad:GetUserSave()/*lUserSave*/)
            oParamBoxLoad:ParamSave(aPBoxPrm)
            if (lParamBox)
                SM0->(dbSetOrder(1))
                if (SM0->(!dbSeek(MV_PAR01+MV_PAR02,.F.)))
                    lParamBox:=ApMsgYesNo("Empresa ("+MV_PAR01+") e/ou Filial ("+MV_PAR02+") Invalida(s). Deseja selecionar novamente?","ATENCAO")
                    if (lParamBox)
                        if (lParamBox:=ChangeCompanyAndBranch(MV_PAR01,MV_PAR02,.F.))
                            aPBoxRet:=Array(Len(aPBoxPrm))
                            MV_PAR01:=oParamBoxLoad:ParamLoad(aPBoxPrm,1,cCompany/*xDefault*/,.F./*lDefault*/)
                            aPBoxRet[1]:=MV_PAR01
                            MV_PAR02:=oParamBoxLoad:ParamLoad(aPBoxPrm,2,cBranch/*xDefault*/,.F./*lDefault*/)
                            aPBoxRet[2]:=MV_PAR02
                            oParamBoxLoad:ParamSave(aPBoxPrm)
                        endif
                    endif
                else
                    MV_PAR01:=oParamBoxLoad:ParamLoad(aPBoxPrm,1,cCompany/*xDefault*/,.F./*lDefault*/)
                    aPBoxRet[1]:=MV_PAR01
                    MV_PAR02:=oParamBoxLoad:ParamLoad(aPBoxPrm,2,cBranch/*xDefault*/,.F./*lDefault*/)
                    aPBoxRet[2]:=MV_PAR02
                endif
                oParamBoxLoad:ParamSave(aPBoxPrm)
                if (lParamBox)
                    cCompany:=aPBoxRet[1]
                    cBranch:=aPBoxRet[2]
                    nATModulo:=aPBoxRet[3]
                else
                    MV_PAR01:=cEmpAnt
                    MV_PAR02:=cFilAnt
                    MV_PAR02:=nModulo
                    oParamBoxLoad:ParamSave(aPBoxPrm)
                endif
            endif
        restInter()

        FreeObj(@oParamBoxLoad)

        FWFreeArray(@aPBoxPrm)
        FWFreeArray(@aPBoxRet)
        FWFreeArray(@aModulos)
        FWFreeArray(@aRetModName)

        DelClassIntF()

        //Reseta UniqueKey do Filtro SXB
        UniqueKey()

    endif

    if (lParamBox)
        lRPCTools:=FindClass("dna.tech.RPCTools")
        if (lRPCTools)
            if (lIsBlind)
                lChangeOK:=dna.tech.RPCTools():RPCSetEnv(cCompany,cBranch,cEnvServer)
            else
                FWMsgRun(nil,{||lChangeOK:=dna.tech.RPCTools():RPCSetEnv(cCompany,cBranch,cEnvServer)},"Wait...","Changing Company and Branch")
            endif
        else
            if (lIsBlind)
                lChangeOK:=dna.tech.RPCTools():RPCSetEnv(cCompany,cBranch,cEnvServer)
            else
                FWMsgRun(nil,{||lChangeOK:=RPCSetEnv(cCompany,cBranch,cEnvServer)},"Wait...","Changing Company and Branch")
            endif
        endif
        if (!Empty(nATModulo))
            aRetModName:=RetModName(lAllModulos)
            SetModulo(aRetModName[nATModulo][2],Right(aRetModName[nATModulo][2],Len(cModulo)))
            FWFreeArray(@aRetModName)
        endif
    endif

return(lChangeOK)

method SBAdminCheck(cSBAdminPath) class FWExampleTools
return(FWSBAdminTools():SBAdminCheck(@cSBAdminPath))
