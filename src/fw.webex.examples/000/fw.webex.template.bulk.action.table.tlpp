/*
  __                            _
 / _|__      ____      __  ___ | |__    ___ __  __
| |_ \ \ /\ / /\ \ /\ / / / _ \| '_ \  / _ \\ \/ /
|  _| \ V  V /  \ V  V / |  __/| |_) ||  __/ >  <
|_|    \_/\_/    \_/\_/   \___||_.__/  \___|/_/\_\

Released to Public Domain.
--------------------------------------------------------------------------------------
*/

namespace FWWebEx

#include "fw.webex.th"

#include "dbstruct.ch"

class WebExTemplateBulkActionTable from WebExDiv

    protected data cTemplateBulkActionTableTitle

    protected data jTemplateBulkActionTableColumns as json
    protected data jTemplateBulkActionTableItems as json

    public method New(cTemplateBulkActionTableTitle as character) as object

    public method FromSQL(cTemplateBulkActionTableSQL as character) as object
    public method RenderHTML() as character

endclass

method New(cTemplateBulkActionTableTitle) class WebExTemplateBulkActionTable
    paramtype 1 var cTemplateBulkActionTableTitle as character optional default ""
    ::cTemplateBulkActionTableTitle:=cTemplateBulkActionTableTitle
    ::jTemplateBulkActionTableColumns:=JSONObject():New()
    ::jTemplateBulkActionTableItems:=JSONObject():New()
    _Super:New()
    _Super:SetEnableDataTable()
    ::SetAttr("style","overflow-x:auto")
return(self)

method FromSQL(cTemplateBulkActionTableSQL) class WebExTemplateBulkActionTable

    local aCols:={} as array
    local aData:={} as array
    local aColumns as array

    local cLabel as character
    local cProperty as character
    local cTmpAlias as character

    local i as numeric
    local nColumns as numeric

    cQuery:="%"+cTemplateBulkActionTableSQL+"%"

    cTmpAlias:=GetNextAlias()
    beginSQL alias cTmpAlias
        SELECT t.* FROM (
            %exp:cQuery%
        ) t
         WHERE 1=0
    endSQL

    aColumns:=(cTmpAlias)->(dbStruct())
    (cTmpAlias)->(dbCloseArea())
    nColumns:=Len(aColumns)

    if ("POSTGRES"==Upper(AllTrim(TCGetDB())))
        __TCSQLToArr(cQuery,@aData,nil,aColumns,aColumns)
    else
        TCSQLToArr(cTemplateBulkActionTableSQL,@aData,nil,aColumns,aColumns)
    endif

    for i:=1 to nColumns
        cProperty:=aColumns[i][DBS_NAME]
        cLabel:=GetSX3Cache(aColumns[i][DBS_NAME],"X3_TITULO")
        if (Empty(cLabel))
            cLabel:=cProperty
        else
            cLabe:=AllTrim(cLabel)
        endif
        aAdd(aCols,{"property":cProperty,"label":cLabel})
    next i

    ::jTemplateBulkActionTableColumns:Set(aClone(aCols))
    ::jTemplateBulkActionTableItems:Set(aClone(aData))

    FWFreeArray(@aCols)
    FWFreeArray(@aData)
    FWFreeArray(@aColumns)

return(self)

method RenderHTML() class WebExTemplateBulkActionTable

    local cHTML as character
    local cScript as character

    local cIDTable as character
    local cIDModal:=self:NewID() as character
    local cIDWrapper:=self:GetFixedID() as character

    local i as numeric
    local j as numeric

    WITH WEBEXOBJECT self

        WITH WEBEXOBJECT CLASS WebExControl TYPE div
            .:SetAttr("class","container rounded shadow p-3")
            if (!Empty(::cTemplateBulkActionTableTitle))
                WITH WEBEXOBJECT CLASS WebExControl TYPE h3
                    .:SetAttr("class","mb-3")
                    .:SetContent(::cTemplateBulkActionTableTitle)
                END WEBEXOBJECT
            endif
            WITH WEBEXOBJECT CLASS WebExControl TYPE div
                .:SetAttr("class","table-responsive")
                WITH WEBEXOBJECT CLASS WebExControl TYPE table
                    cIDTable:=.:GetFixedID()
                    .:SetAttr("class","table table-striped table-hover align-middle small")
                    // Cabecalho
                    WITH WEBEXOBJECT CLASS WebExControl TYPE thead
                        WITH WEBEXOBJECT CLASS WebExControl TYPE tr
                            WITH WEBEXOBJECT CLASS WebExControl TYPE th
                                WITH WEBEXOBJECT CLASS WebExCheckBox
                                    .:SetAttr("onclick",cIDTable+"_toggleAll(this)")
                                END WEBEXOBJECT
                                for i:=1 To Len(::jTemplateBulkActionTableColumns)
                                    WITH WEBEXOBJECT CLASS WebExControl TYPE th
                                        .:SetAttr("name",::jTemplateBulkActionTableColumns[i]["property"])
                                        .:SetContent(::jTemplateBulkActionTableColumns[i]["label"])
                                    END WEBEXOBJECT
                                next i
                                WITH WEBEXOBJECT CLASS WebExControl TYPE th
                                    .:SetContent("A&ccedil;&atilde;o")
                                END WEBEXOBJECT
                            END WEBEXOBJECT
                        END WEBEXOBJECT
                    END WEBEXOBJECT
                    // Corpo
                    WITH WEBEXOBJECT CLASS WebExControl TYPE tbody
                        for i:=1 to Len(::jTemplateBulkActionTableItems)
                            WITH WEBEXOBJECT CLASS WebExControl TYPE tr
                                WITH WEBEXOBJECT CLASS WebExControl TYPE td
                                    WITH WEBEXOBJECT CLASS WebExCheckBox
                                    END WEBEXOBJECT
                                END WEBEXOBJECT
                                for j:=1 To Len(::jTemplateBulkActionTableColumns)
                                    WITH WEBEXOBJECT CLASS WebExControl TYPE td
                                        .:SetContent(cValToChar(::jTemplateBulkActionTableItems[i][j]))
                                    END WEBEXOBJECT
                                next j
                                WITH WEBEXOBJECT CLASS WebExControl TYPE td
                                    WITH WEBEXOBJECT CLASS WebExControl TYPE button
                                        .:SetAttr("class","btn btn-sm btn-danger")
                                        .:SetAttr("data-bs-toggle","modal")
                                        .:SetAttr("data-bs-target","#"+cIDModal)
                                        .:SetAttr("onclick",cIDTable+"_setRowToDelete(this)")
                                        .:SetContent("Excluir")
                                    END WEBEXOBJECT
                                END WEBEXOBJECT
                            END WEBEXOBJECT
                        next i
                    END WEBEXOBJECT
                END WEBEXOBJECT
            END WEBEXOBJECT
        END WEBEXOBJECT

        // Modal + JS
        WITH WEBEXOBJECT CLASS WebExControl TYPE div
            .:SetFixedID(cIDModal)
            .:SetAttr("id",cIDModal)
            .:SetAttr("class","modal fade")
            .:SetAttr("tabindex","-1")
            WITH WEBEXOBJECT CLASS WebExControl TYPE div
                .:SetAttr("class","modal-dialog")
                WITH WEBEXOBJECT CLASS WebExControl TYPE div
                    .:SetAttr("class","modal-content")
                    WITH WEBEXOBJECT CLASS WebExControl TYPE div
                        .:SetAttr("class","modal-header")
                        WITH WEBEXOBJECT CLASS WebExControl TYPE h5
                            .:SetAttr("class","modal-title")
                            .:SetContent("Confirma&ccedil;&atilde;o")
                        END WEBEXOBJECT
                        WITH WEBEXOBJECT CLASS WebExControl TYPE button
                            .:SetAttr("class","btn-close")
                            .:SetAttr("data-bs-dismiss","modal")
                            .:SetAttr("aria-label","Fechar")
                        END WEBEXOBJECT
                    END WEBEXOBJECT
                    WITH WEBEXOBJECT CLASS WebExControl TYPE div
                        .:SetAttr("class","modal-body")
                        .:SetContent("Deseja realmente excluir esta linha?")
                    END WEBEXOBJECT
                    WITH WEBEXOBJECT CLASS WebExControl TYPE div
                        .:SetAttr("class","modal-footer")
                        WITH WEBEXOBJECT CLASS WebExControl TYPE button
                            .:SetAttr("class","btn btn-secondary")
                            .:SetAttr("data-bs-dismiss","modal")
                            .:SetContent("Cancelar")
                        END WEBEXOBJECT
                        WITH WEBEXOBJECT CLASS WebExControl TYPE button
                            .:SetAttr("type","button")
                            .:SetAttr("class","btn btn-danger")
                            .:SetAttr("onclick",cIDTable+"_confirmDelete()")
                            .:SetContent("Excluir")
                        END WEBEXOBJECT
                    END WEBEXOBJECT
                END WEBEXOBJECT
            END WEBEXOBJECT
        END WEBEXOBJECT

        WITH WEBEXOBJECT CLASS WebExScript

            .:SetExternalAssets(.T.)

            beginContent var cScript

                /**
                * Holds the reference to the currently selected row for deletion.
                * This variable is scoped per table instance using a unique suffix (FUNCID).
                */
                let rowToDelete_FUNCID = null;

                /**
                * Stores the row element that triggered the delete action.
                * This function is called when the user clicks the "Delete" button in a row.
                *
                * @param {HTMLElement} button - The button element clicked by the user.
                */
                function FUNCID_setRowToDelete(button) {
                    rowToDelete_FUNCID = button.closest("tr");
                }

                /**
                * Confirms and executes the row deletion.
                * If a row was previously selected via `setRowToDelete`, it removes it from the DOM.
                * Also closes the Bootstrap modal after the action.
                */
                function FUNCID_confirmDelete() {
                    if (rowToDelete_FUNCID) {
                        rowToDelete_FUNCID.remove();
                        rowToDelete_FUNCID = null;
                    }
                    const modal = bootstrap.Modal.getInstance(document.getElementById("cIDModal"));
                    modal.hide();
                }

                /**
                * Toggles the selection state of all checkboxes within the table.
                * Called when the user clicks the "select all" checkbox in the header.
                *
                * @param {HTMLInputElement} masterCheckbox - The main checkbox that controls all row checkboxes.
                */
                function FUNCID_toggleAll(container) {
                    const checkbox = container.querySelector('input[type="checkbox"]');
                    const isChecked = checkbox.checked;
                    const table = container.closest("table");
                    const checkboxes = table.querySelectorAll('input[type="checkbox"]:not(#'+checkbox.id+')');
                    checkboxes.forEach(cb => cb.checked = isChecked);
                }

                /**
                * Automatically scales down the table to fit the horizontal space of its container.
                * Useful when the table has many columns and exceeds screen width.
                * This function adjusts the CSS transform scale dynamically on load and resize.
                */
                function FUNCID_autoScaleTable() {

                    const wrapper = document.getElementById("cIDWrapper");
                    const table = document.getElementById("cIDTable");

                    if (!wrapper || !table) {
                        console.warn("AutoScaleTable: wrapper or table not found.");
                        return;
                    }

                    const tableWidth = table.scrollWidth;
                    const wrapperWidth = wrapper.clientWidth;

                    if (tableWidth > wrapperWidth) {
                        const scale = wrapperWidth / tableWidth;
                        table.style.transform = `scale(${scale})`;
                        table.style.transformOrigin = "top left";
                    } else {
                        table.style.transform = "scale(1)";
                    }
                }

                // Auto-scale the table on page load and resize events.
                window.addEventListener("load", FUNCID_autoScaleTable);
                window.addEventListener("resize", FUNCID_autoScaleTable);

            endContent

            cScript:=.:StrReplace(cScript,{;
                 "FUNCID"     : cIDTable;
                ,"cIDTable"   : cIDTable;
                ,"cIDModal"   : cIDModal;
                ,"cIDWrapper" : cIDWrapper;
                };
            )

            .:SetContent(cScript)

        END WEBEXOBJECT

    END WEBEXOBJECT NOADDCHILD

    cHtml:=_Super:RenderHTML()

return(cHtml)

static function __TCSqlToArr(cQuery,aResult,aBinds,aSetFields,aQryStru) as array

    local aFieldPos:=Array(0) as array
    local aDataArray:=aResult as array

    local cTmpAlias:=GetNextAlias() as character

    local nField as numeric
    local nFields as numeric

    beginSQL alias cTmpAlias
        select t.* from (%exp:cQuery%) t
    endSQL

    nFields:=Len(aSetFields)
    for nField:=1 to nFields
        cField:=aSetFields[nField][DBS_NAME]
        aAdd(aFieldPos,{nField,cField})
        TCSetField(cTmpAlias,cField,aSetFields[nField][DBS_TYPE],aSetFields[nField][DBS_LEN],aSetFields[nField][DBS_DEC])
    next nField

    while ((cTmpAlias)->(!eof()))
        (cTmpAlias)->(aAdd(aDataArray,RegToArray(cTmpAlias,aFieldPos)))
        ((cTmpAlias)->(!dbSkip()))
    end while

    (cTmpAlias)->(dbCloseArea())

    FWFreeArray(@aFieldPos)

return(aDataArray)

static function RegToArray(cAlias as character,aFieldPos as array) as array

    local aValues:=Array(0) as array

    aValues:=Array(Len(aFieldPos))
    (cAlias)->(aEval(aFieldPos,{|aField,nAT|aValues[nAT]:=FieldGet(aField[1])}))

return(aValues)
