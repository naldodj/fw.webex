/*
  __                            _
 / _|__      ____      __  ___ | |__    ___ __  __
| |_ \ \ /\ / /\ \ /\ / / / _ \| '_ \  / _ \\ \/ /
|  _| \ V  V /  \ V  V / |  __/| |_) ||  __/ >  <
|_|    \_/\_/    \_/\_/   \___||_.__/  \___|/_/\_\

+-----> WebExPage
        +
        |
        +-----> WebExSideBar (com WebExNavSide ou WebExNavTop)
        |
        +-----> WebExMain
                +
                |
                +-----> WebExContainer
                        +
                        |
                        +-----> Conteudo

Released to Public DoBodyMain.
--------------------------------------------------------------------------------------
*/

namespace FWWebEx

#include "fw.webex.th"

class WebExPage from WebExHtml

    protected data cTheme as character
    protected data cPageTitle as character

    protected data jPageStyle as json

    protected data lAddFooter as logical
    protected data lDarkTheme as logical

    protected data oPage as object
    protected data oPageBody as object
    protected data oPageHeader as object

    public method New(cPageTitle as character) as object

    public method Clean() as variant

    public method AddChild(oPageChild as object) as object

    public method AddPageStyle(cPageStyle) as object
    public method SetObjPageBody(oPageBody as object) as object

    public method DisableFooter(lDisableFooter as logical) as object
    public method DisableDarkTheme(lDisableDarkTheme as logical)  as object

    public method GetObjPageAfterRender() as object

    public method RenderHTML() as character

endclass

method New(cPageTitle) class WebExPage

    paramtype cPageTitle as character optional default "FWWEBEX"

    ::cPageTitle:=cPageTitle
    ::jPageStyle:=JSONObject():New()
    ::lAddFooter:=.T.
    ::lDarkTheme:=WebApp():ThemeIsDark(@::cTheme)

    _Super:New()

    ::oPage:=self

    WITH WEBEXOBJECT ::oPage CLASS WebExHtml
        .:SetAttr("lang","pt-br")
        WITH WEBEXOBJECT ::oPageHeader CLASS WebExHead
            ***************************************************************************************************************************
            //Title
            WITH WEBEXOBJECT CLASS WebExTitle ARGS ::cPageTitle
            END WEBEXOBJECT
            ***************************************************************************************************************************
            //Meta
            WITH WEBEXOBJECT CLASS WebExMeta
                .:SetAttr("charset","UTF-8")
            END WEBEXOBJECT
            WITH WEBEXOBJECT CLASS WebExMeta
                .:SetAttr("application-name","FWWebEx")
            END WEBEXOBJECT
            WITH WEBEXOBJECT CLASS WebExMeta
                .:SetAttr("name","viewport")
                .:SetAttr("content","width=device-width, initial-scale=1")
            END WEBEXOBJECT
            ***************************************************************************************************************************
            //PO UI CSS
                WITH WEBEXOBJECT CLASS WebExComment
                    .:SetContent("PO UI CSS")
                END WEBEXOBJECT
                WITH WEBEXOBJECT CLASS WebExLink
                    .:SetAttr("href","https://cdn.jsdelivr.net/npm/@po-ui/style/css/po-theme-default.min.css")
                    .:SetAttr("rel","stylesheet")
                END WEBEXOBJECT
            //PO UI CSS
            ***************************************************************************************************************************
            //Bootstrap CSS
                WITH WEBEXOBJECT CLASS WebExComment
                    .:SetContent("Bootstrap CSS")
                END WEBEXOBJECT
                WITH WEBEXOBJECT CLASS WebExLink
                    .:SetAttr("href","https://cdn.jsdelivr.net/npm/bootstrap/dist/css/bootstrap.min.css")
                    .:SetAttr("rel","stylesheet")
                END WEBEXOBJECT
            //Bootstrap CSS
            ***************************************************************************************************************************
            //Bootstrap Optional JavaScript
                WITH WEBEXOBJECT CLASS WebExComment
                    .:SetContent("Optional JavaScript")
                END WEBEXOBJECT
                WITH WEBEXOBJECT CLASS WebExComment
                    .:SetContent("jQuery first, then Popper.js, then Bootstrap JS")
                END WEBEXOBJECT
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://releases.jquery.com/git/jquery-git.slim.min.js")
                END WEBEXOBJECT
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://releases.jquery.com/git/jquery-git.min.js")
                END WEBEXOBJECT
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.jsdelivr.net/npm/@popperjs/core/dist/umd/popper.min.js")
                END WEBEXOBJECT
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.jsdelivr.net/npm/bootstrap/dist/js/bootstrap.min.js")
                END WEBEXOBJECT
            //Bootstrap Optional JavaScript
            ***************************************************************************************************************************
        END WEBEXOBJECT
        ***************************************************************************************************************************
        //Scripts FWWebEx.RequestHandler
        beginContent var cPageScript
            /***********************************************************************
            * FWWebEx.RequestHandler (v2) - agora 100% compativel
            * - Usa CustomEvent + event.detail (padrao DOM)
            * - Mantem fallback para event.protheusResponse (legado)
            * - Inclui logs de debug opcionais
            **********************************************************************/
            window.FWWebEx = window.FWWebEx || {};
            FWWebEx.RequestHandler = (() => {
                let _debug = true;
                const log = (...args) => _debug && console.log('[FWWebEx]', ...args);

                function startConnectingAnimation() {
                    const status = document.getElementById('fwwebex-connection-status');
                    if (!status) return () => {};
                    const dots = [
                        document.getElementById('fwwebex_connection_status_dot1'),
                        document.getElementById('fwwebex_connection_status_dot2'),
                        document.getElementById('fwwebex_connection_status_dot3')
                    ];
                    let step = 0;
                    status.style.display = 'inline';
                    const interval = setInterval(() => {
                        dots.forEach((d, i) => d && (d.style.visibility = i <= step ? 'visible' : 'hidden'));
                        step = (step + 1) % 3;
                    }, 400);
                    return () => {
                        clearInterval(interval);
                        status.style.display = 'none';
                    };
                }

                function waitForConnection(maxRetries = 5, interval = 1000) {
                    return new Promise((resolve, reject) => {
                        let attempts = 0;
                        const check = () => {
                            log('Verificando conexao, tentativa:', attempts + 1, 'twebchannel:', twebchannel);
                            if (twebchannel?.gotConnection) resolve(true);
                            else if (++attempts >= maxRetries) reject(new Error('WebSocket/MessageChannel nao conectado.'));
                            else setTimeout(check, interval);
                        };
                        check();
                    });
                }

                function execute({ requestData, callbackEvent = 'CALLBACK_DATA_RESPONSE', execEvent = 'CALLBACK_EXEC', maxRetries = 5, interval = 1000, onResponse, onError }) {
                    const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                    const stopAnimation = startConnectingAnimation();
                    const handleResponse = (event) => {
                        log('Evento recebido:', event);
                        const data = event.detail ?? event.protheusResponse;
                        if (!data) {
                            log('Evento sem payload esperado ? ignorado');
                            return;
                        }
                        try {
                            onResponse?.(data);
                        } catch (err) {
                            console.error('[FWWebEx] Erro no onResponse:', err);
                            onError?.(err);
                        } finally {
                            stopAnimation();
                            twebchannel.eventTarget.removeEventListener(callbackEvent, handleResponse);
                        }
                    };

                    waitForConnection(maxRetries, interval)
                        .then(() => {
                            twebchannel.eventTarget.addEventListener(callbackEvent, handleResponse);
                            twebchannel.jsToAdvpl(execEvent, JSON.stringify({ ...requestData, requestId }));
                        })
                        .catch(err => {
                            stopAnimation();
                            console.error('[FWWebEx] Erro de conexao:', err);
                            onError?.(err);
                        });
                }

                function debug(flag = true) { _debug = !!flag; }
                return { execute, waitForConnection, startConnectingAnimation, debug };
            })();


        endContent
        WITH WEBEXOBJECT CLASS WebExScript
            .:SetContent(cPageScript)
        END WEBEXOBJECT
        ***************************************************************************************************************************
        //Scripts decodeHTMLEntities
        beginContent var cPageScript
            function decodeHTMLEntities(text) {
                const txt = document.createElement("textarea");
                txt.innerHTML = text;
                return txt.value;
            }
            function showComingSoon(route) {
                alert(decodeHTMLEntities('Rota '+route+' ainda n&atilde;o implementada!'));
            }
        endContent
        WITH WEBEXOBJECT CLASS WebExScript
            .:SetContent(cPageScript)
        END WEBEXOBJECT
        ***************************************************************************************************************************
    END WEBEXOBJECT NOADDCHILD

return(self)

method Clean() class WebExPage

    //Styles
    aEval(;
         ::jPageStyle:GetNames();
        ,{|cName as character|;
            if(;
                (ValType(::jPageStyle[cName])=="O");
                ,(;
                    ::jPageStyle[cName]:CleanChildren();
                   ,FreeObj(::jPageStyle[cName]);
                );
                ,nil;
            );
            ,::jPageStyle:DelName(cName);
        };
    )

    if (valType(::oPageBody)=="O")
        ::oPageBody:CleanChildren()
        FreeObj(@::oPageBody)
    endif

    if (valType(::oPage)=="O")
        ::oPage:CleanChildren()
    endif

    _Super:Clean()

return(nil)

method AddChild(oPageChild) class WebExPage
    local cClassName as character
    paramtype 1 var oPageChild as object
    cClassName:=GetClassName(oPageChild)
    if (!Left(cClassName,8)=="FWWEBEX.")
        CLASSPARAMEXCEPTION PARAM 1 VAR oPageChild TEXT cClassName MESSAGE "Object must belong to the FWWEBEX namespace. Got '"+cClassName+"' instead. Check your class declaration."
    elseif ((!MethIsMemberOf(oPageChild,"ISKINDOF",.T.)).or.(!oPageChild:IsKindOf("WEBEXCONTROL",.T.)))
        CLASSPARAMEXCEPTION PARAM 1 VAR oPageChild TEXT cClassName MESSAGE "Object must inherit from FWWEBEX.WebExControl. Received: "+cClassName+"."
    elseif (oPageChild:IsKindOf("WEBEXPAGE",.T.))
        CLASSPARAMEXCEPTION PARAM 1 VAR oPageChild TEXT cClassName MESSAGE "Cannot nest a WebExPage inside another WebExPage. Received: "+cClassName+". A WebExPage must be the top-level container."
    endif
    if (oPageChild:IsKindOf("WEBEXBODY"))
        ::SetObjPageBody(oPageChild)
    else
        _Super:AddChild(oPageChild)
    endif
return(self)

method AddPageStyle(cPageStyle) class WebExPage
    local oStyle as object
    paramtype 1 var cPageStyle as character
    WITH WEBEXOBJECT oStyle CLASS WebExControl TYPE style
        .:SetContent(cPageStyle)
        ::jPageStyle[oStyle:GetID()]:=oStyle
    END WEBEXOBJECT NOADDCHILD
return(self)

method SetObjPageBody(oPageBody) class WebExPage
    local cClassName as character
    paramtype 1 var oPageBody as object
    cClassName:=GetClassName(oPageBody)
    if (!Left(cClassName,8)=="FWWEBEX.")
        CLASSPARAMEXCEPTION PARAM 1 VAR oPageBody TEXT cClassName MESSAGE "Object must belong to the FWWEBEX namespace. Got '"+cClassName+"' instead. Check your class declaration."
    elseif ((!MethIsMemberOf(oPageBody,"ISKINDOF",.T.)).or.(!oPageBody:IsKindOf("WEBEXCONTROL",.T.)))
        CLASSPARAMEXCEPTION PARAM 1 VAR oPageBody TEXT cClassName MESSAGE "Object must inherit from FWWEBEX.WebExControl. Received: "+cClassName+"."
    endif
    if (!oPageBody:IsKindOf("WEBEXBODY",.T.))
        ::oPageBody:=WebExBody():New()
        ::oPageBody:AddChild(oPageBody)
    else
        ::oPageBody:=oPageBody
    endif
return(self)

method GetObjPageAfterRender() class WebExPage
return(::GetMemberData("oPage"))

method DisableFooter(lDisableFooter) class WebExPage
    paramtype 1 var lDisableFooter as logical optional default (!::lAddFooter)
    ::lAddFooter:=(!lDisableFooter)
return(self)

method DisableDarkTheme(lDisableDarkTheme) class WebExPage
    paramtype 1 var lDisableDarkTheme as logical optional default (!::lDarkTheme)
    ::lDarkTheme:=(!lDisableDarkTheme)
return(self)

method RenderHTML() class WebExPage

    local cHTML as character
    local cPageStyle as character
    local cPageScript as character

    local jHeader as json
    local jAssets as json
    local jHeadScripts as json
    local jPageScripts as json

    local lHasMain as logical
    local lHasBody as logical
    local lExternalAssets:=.F. as logical

    local oPageBody as object
    local oBodyMain as object

    cHTML:="<!DOCTYPE html>"

    if ((!::lDarkTheme).and.(!Empty(::cTheme)).and.(::cTheme=="SUNSET"))

        beginContent var cPageStyle

            :root {
                --totvs-red: #c62828;
                --totvs-light-gray: #f4f4f4;
                --totvs-dark-gray: #dcdcdc;
                --totvs-border: #ccc;
                --totvs-text: #000;
                --totvs-highlight: #e0e0e0;
                --totvs-btn-bg: #ffffff;
            }

            body {
                background-color: var(--totvs-light-gray) !important;
                color: var(--totvs-text) !important;
                font-family: "Segoe UI", sans-serif !important;
            }

            .btn {
                background-color: var(--totvs-btn-bg) !important;
                color: var(--totvs-red) !important;
                border: 1px solid var(--totvs-red) !important;
                border-radius: 4px !important;
                font-weight: bold;
                padding: 6px 12px;
                transition: all 0.2s ease-in-out !important;
            }

            .btn:hover,
            .btn:focus {
                background-color: var(--totvs-red) !important;
                color: #fff !important;
            }

            .form-control,
            .form-select {
                background-color: #fff !important;
                color: var(--totvs-text) !important;
                border: 1px solid var(--totvs-border) !important;
                border-radius: 3px !important;
                padding: 5px 10px;
            }

            .form-control:focus,
            .form-select:focus {
                border-color: var(--totvs-red) !important;
                box-shadow: 0 0 3px rgba(198, 40, 40, 0.4) !important;
            }

            .card {
                border: 1px solid var(--totvs-border) !important;
                border-radius: 6px;
                padding: 15px;
                color: var(--totvs-text);
                box-shadow: 0 0 10px rgba(0,0,0,0.05);
            }

            .navbar {
                background-color: #fff !important;
                border-bottom: 2px solid var(--totvs-red) !important;
            }

            .navbar .nav-link,
            .navbar-brand {
                color: var(--totvs-text) !important;
            }

            .navbar .nav-link:hover {
                color: var(--totvs-red) !important;
            }

            .table {
                background-color: #fff !important;
                color: var(--totvs-text) !important;
                border: 1px solid var(--totvs-border);
            }

            .table thead {
                background-color: var(--totvs-dark-gray) !important;
                color: var(--totvs-text) !important;
            }

            .table-bordered,
            .table-bordered th,
            .table-bordered td {
                border: 1px solid var(--totvs-border) !important;
            }

            .table tbody tr:hover {
                background-color: var(--totvs-highlight) !important;
            }

            a {
                color: var(--totvs-red) !important;
                text-decoration: none;
            }

            a:hover {
                text-decoration: underline;
            }

            input[type="checkbox"],
            input[type="radio"] {
                accent-color: var(--totvs-red) !important;
            }

        endContent

        ::AddPageStyle(cPageStyle)

    endif

    if (Empty(::oPageBody))
        oBodyMain:=WebExMain():New()
        oPageBody:=WebExBody():New()
        oPageBody:AddChild(oBodyMain)
    else
        lHasMain:=::oPageBody:IsKindOf("WEBEXMAIN")
        lHasBody:=::oPageBody:IsKindOf("WEBEXBODY")
        if ((lHasMain).or.(lHasBody))
            oPageBody:=::oPageBody
        else
            oBodyMain:=WebExMain():New()
            oBodyMain:AddChild(::oPageBody)
            oPageBody:=WebExBody():New()
            oPageBody:AddChild(oBodyMain)
        endif
    endif
    ::oPageBody:=oPageBody
    if (::lAddFooter)
        WITH WEBEXOBJECT ::oPageBody
            WITH WEBEXOBJECT CLASS WebExFooter
            END WEBEXOBJECT
        END WEBEXOBJECT NOADDCHILD
    endif

    WITH WEBEXOBJECT ::oPage
        if (::lDarkTheme)
            .:SetAttr("data-bs-theme","dark")
        endif
        WITH WEBEXOBJECT ::oPageHeader
            //Custom Header
            jHeader:=::oPageHeader:GetHeader()
            aEval(jHeader:GetNames(),{|cName|::GetMemberData("oPageHeader"):AddChild(jHeader[cName])})
            ***************************************************************************************************************************
            //Styles
            aEval(::jPageStyle:GetNames(),{|cName|::GetMemberData("oPageHeader"):AddChild(::jPageStyle[cName])})
            ***************************************************************************************************************************
            //Scripts Head
            jHeadScripts:=::oPageHeader:GetHeadScripts()
            aEval(jHeadScripts:GetNames(),{|cName|::GetMemberData("oPageHeader"):AddChild(jHeadScripts[cName])})
            ***************************************************************************************************************************
            //TOTVS Script
                cEnvServer:=Alltrim(Lower(GetEnvServer()))
                cAPPRootURI:=WebApp():GetAPPRoot()
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent(cAPPRootURI+"preindex_env_"+cEnvServer+"/twebchannel.js")
                END WEBEXOBJECT
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent(cAPPRootURI+"preindex_env_"+cEnvServer+"/totvstec.js")
                END WEBEXOBJECT
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent(cAPPRootURI+"preindex_env_"+cEnvServer+"/fwprotheus.js")
                END WEBEXOBJECT
            //TOTVS Script
            ***************************************************************************************************************************
        END WEBEXOBJECT NOADDCHILD
        ***************************************************************************************************************************
        WITH WEBEXOBJECT ::oPageBody
        END WEBEXOBJECT
        ***************************************************************************************************************************
        //Scripts
        jPageScripts:=::oPage:GetPageScriptBundle()
        aEval(jPageScripts:GetNames(),{|cName|if(!lExternalAssets,lExternalAssets:=jPageScripts[cName]:GetExternalAssets(),nil),::GetMemberData("oPage"):AddChild(jPageScripts[cName])})
        ::lExternalAssets:=lExternalAssets
        .:SetExternalAssets(::lExternalAssets)
        if (::ExternalAssetsIsEnabled().and.(::lExternalAssets))
            //External Assets (Do Not Use WebExScript Here)
            WITH WEBEXOBJECT CLASS WebExControl TYPE script
                .:SetContent("/*__EXTERNAL_ASSETS__*/")
            END WEBEXOBJECT
        endif
    END WEBEXOBJECT NOADDCHILD

    cHTML+=::oPage:RenderHTML()

    if ((::ExternalAssetsIsEnabled()).and.(::lExternalAssets))
        jAssets:=::GetAssets()
        if (Len(jAssets:GetNames())>0)
            beginContent var cPageScript
                (
                    function(){
                        var useLocal = (
                            location.protocol === "file:"
                        );
                        var assets = __jAssets__;
                        Object.keys(assets).forEach(function(id){
                            var asset = assets[id];
                            var el;
                            if (asset.type === "style") {
                                el = document.createElement("link");
                                el.rel = "stylesheet";
                                el.href = useLocal ? asset.local : asset.remote;
                            } else if (asset.type === "script") {
                                el = document.createElement("script");
                                el.src = useLocal ? asset.local : asset.remote;
                                el.type = "text/javascript";
                            }
                            if (el) {
                                el.setAttribute("data-id", asset.id); // opcional, pra rastrear depois
                                document.head.appendChild(el);
                            }
                        });
                    }
                )();
            endContent
            cPageScript:=WebExHelper():StrReplace(cPageScript,{"__jAssets__",jAssets:ToJSON()})
            cHTML:=WebExHelper():StrReplace(cHTML,{"/*__EXTERNAL_ASSETS__*/",cPageScript})
        endif
    endif

    FreeObj(@jHeader)
    FreeObj(@jHeadScripts)
    FreeObj(@jPageScripts)

return(cHTML)
