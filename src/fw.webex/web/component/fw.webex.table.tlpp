/*
  __                            _
 / _|__      ____      __  ___ | |__    ___ __  __
| |_ \ \ /\ / /\ \ /\ / / / _ \| '_ \  / _ \\ \/ /
|  _| \ V  V /  \ V  V / |  __/| |_) ||  __/ >  <
|_|    \_/\_/    \_/\_/   \___||_.__/  \___|/_/\_\

Released to Public Domain.
--------------------------------------------------------------------------------------
*/

namespace FWWebEx

#include "fw.webex.th"

class WebExTable from WebExControl

    protected data cTableTitle as character

    protected data jTableHeader as json
    protected data jTableDetail as json

    protected data lTableExpandable as logical
    protected data lTableTitleBefore as logical

    protected data oTableTHead as object
    protected data oTableTBody as object

    protected data oTableTHeadTH as object
    protected data oTableTHeadTR as object

    protected data oTableTBodyRowTD as object
    protected data oTableTBodyRowTR as object
    protected data oTableTBodyRowTDButton as object

    protected data oTableCaption as object

    protected data oTableScript as object

    public method New(cTableTitle) as object
    public method AddColumnHeader(cTableColummLabel as character) as object
    public method BuildHeader() as object
    public method AddCell(xTableCellValue as variant) as object
    public method BuildBodyRow() as object
    public method EnableDrillDown() as object
    public method RenderHTML() as character

    public method SetTableTitle(cTableTitle as character) as character
    public method SetObjTableScript(oTableScript as object) as object

endclass

method New(cTableTitle) class WebExTable
    paramtype 1 var cTableTitle as character optional
    ::cTableTitle:=cTableTitle
    ::lTableTitleBefore:=.T.
    ::jTableHeader:=JSONObject():New()
    ::jTableDetail:=JSONObject():New()
    ::lTableExpandable:=.F.
    ::oTableTBody:=WebExTBody():New()
    ::oTableTHead:=WebExTHead():New()
    _Super:New("table")
    _Super:SetEnableDataTable()
    ::AddClass("table")
    ::AddClass("table-striped")
    ::AddClass("table-hover")
    ::SetTableTitle()
return(self)

method AddColumnHeader(cTableColummLabel) class WebExTable
    local oTH:=WebExTH():New() as object
    paramtype 1 var cTableColummLabel as character
    oTH:SetContent(cTableColummLabel)
    ::jTableHeader[oTH:GetID()]:=oTH
return(oTH)

method BuildHeader() class WebExTable
    ::oTableTHeadTR:=WebExTR():New()
    if (::lTableExpandable)
        ::oTableTHeadTH:=WebExTH():New()
        ::oTableTHeadTH:SetContent("")
        ::oTableTHeadTR:AddChild(::oTableTHeadTH)
    endif
    aEval(::jTableHeader:GetNames(),{|cName|::GetMemberData("oTableTHeadTR"):AddChild(::GetMemberData("jTableHeader")[cName])})
    ::oTableTHead:AddChild(::oTableTHeadTR)
    ::SetMemberData("jTableHeader",JSONObject():New())
return(self)

method AddCell(xTableCellValue) class WebExTable
    local oTD:=WebExTD():New() as object
    oTD:SetContent(cValToChar(xTableCellValue))
    ::jTableDetail[oTD:GetID()]:=oTD
return(oTD)

method BuildBodyRow(cDataHTML) class WebExTable
    local cIDPrefix as character
    ::oTableTBodyRowTR:=WebExTR():New()
    if (::lTableExpandable)
        paramtype 1 var cDataHTML as character optional
        cIDPrefix:=::GetFixedID()
        ::oTableTBodyRowTDButton:=WebExButton():New()
        ::oTableTBodyRowTDButton:AddClass("btn-sm")
        ::oTableTBodyRowTDButton:SetAttr("onclick",cIDPrefix+"_expandRow(this)")
        if (!Empty(cDataHTML))
            ::oTableTBodyRowTDButton:SetAttr("data-html",cDataHTML)
        endif
        ::oTableTBodyRowTDButton:SetContent("+")
        ::oTableTBodyRowTD:=WebExControl():New("td")
        ::oTableTBodyRowTD:AddChild(::oTableTBodyRowTDButton)
        ::oTableTBodyRowTR:AddChild(::oTableTBodyRowTD)
    endif
    aEval(::jTableDetail:GetNames(),{|cName|::GetMemberData("oTableTBodyRowTR"):AddChild(::GetMemberData("jTableDetail")[cName])})
    ::oTableTBody:AddChild(::oTableTBodyRowTR)
    ::SetMemberData("jTableDetail",JSONObject():New())
return(::oTableTBodyRowTR)

method EnableDrillDown() class WebExTable
    ::lTableExpandable:=.T.
    ::SetObjTableScript()
return(self)

method RenderHTML() class WebExTable

    local cHTML as character

    if (!Empty(::cTableTitle))
        ::SetTableTitle()
        ::AddChild(::oTableCaption)
    endif

    ::AddChild(::oTableTHead)
    ::AddChild(::oTableTBody)

    if (::lTableExpandable)
        ::SetObjTableScript()
    endif

    cHTML:=_Super:RenderHTML()

return(cHTML)

method SetTableTitle(cTableTitle) class WebExTable
    paramtype 1 var cTableTitle as character optional default ::cTableTitle
    ::SetMemberData("cTableTitle",cTableTitle)
    if (!Empty(::cTableTitle))
        ::DelClassRegex("caption-(top|bottom)") // remove qualquer caption-* anterior (se tiver))
        ::AddClass(if(::lTableTitleBefore,"caption-top","caption-bottom"))
        if ((ValType(::oTableCaption)!="O").or.(::oTableCaption:ClassName()=="WEBEXCAPTION"))
            ::oTableCaption:=WebExCaption():New()
            ::oTableCaption:AddClass("text-center")
            ::oTableCaption:AddClass("fw-bold")
        endif
        ::oTableCaption:SetContent(::cTableTitle)
    endif
return(self)

method SetObjTableScript(oTableScript) class WebExTable
    local cScript as character
    local lTableScript as logical
    paramtype 1 var oTableScript as object class WebExScript optional
    lTableScript:=(valType(::oTableScript)=="O")
    if (ValType(oTableScript)=="O")
        if (!lTableScript)
            ::oTableScript:=WebExScript():New()
        endif
        ::oTableScript:MergeFromObject(@oTableScript)
    elseif ((::lTableExpandable).and.(!lTableScript))
        ::oTableScript:=WebExScript():New()
        //TODO: fetch real content via AJAX and update td.innerHTML
        beginContent var cScript
            function __cID___expandRow(button) {
                const tr = button.closest('tr');
                if (tr.nextSibling && tr.nextSibling.classList.contains('child-row')) {
                    tr.nextSibling.remove();
                    button.innerText = '+';
                    return;
                }
                const td = document.createElement('td');
                td.colSpan = tr.children.length;
                td.innerHTML = button.getAttribute('data-html') || '<div class=\"text-muted\">Loading...</div>';
                const newRow = document.createElement('tr');
                newRow.classList.add('child-row');
                newRow.appendChild(td);
                tr.parentNode.insertBefore(newRow, tr.nextSibling);
                button.innerText = '-';
            }
        endContent
        cScript:=StrTran(cScript,"__cID__",::GetFixedID())
        ::oTableScript:SetContent(cScript)
    endif

return(self)
