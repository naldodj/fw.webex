/*
  __                            _
 / _|__      ____      __  ___ | |__    ___ __  __
| |_ \ \ /\ / /\ \ /\ / / / _ \| '_ \  / _ \\ \/ /
|  _| \ V  V /  \ V  V / |  __/| |_) ||  __/ >  <
|_|    \_/\_/    \_/\_/   \___||_.__/  \___|/_/\_\

Released to Public Domain.
--------------------------------------------------------------------------------------
*/

namespace FWWebEx

#include "fw.webex.th"

class WebExTable from WebExControl

    protected data cTableTitle as character

    protected data jTableHeader as json
    protected data jTableDetail as json

    protected data lTableExpandable as logical
    protected data lTableTitleBefore as logical

    protected data oTableTHead as object
    protected data oTableTBody as object

    public method New(cTableTitle) as object
    public method SetTitle(cTableTitle) as object
    public method SetTitleBefore(lTableTitleBefore) as object
    public method AddColumnHeader(cTableColummLabel as character) as object
    public method BuildHeader() as object
    public method AddCell(xTableCellValue as variant) as object
    public method BuildBodyRow() as object
    public method EnableDrillDown() as object
    public method RenderHTML() as character

endclass

method New(cTableTitle) class WebExTable
    paramtype 1 var cTableTitle as character optional
    ::SetTitle(cTableTitle)
    ::SetTitleBefore(.T.)
    ::jTableHeader:=JSONObject():New()
    ::jTableDetail:=JSONObject():New()
    ::lTableExpandable:=.F.
    ::oTableTBody:=WebExControl():New("tbody")
    ::oTableTHead:=WebExControl():New("thead")
    _Super:New("table")
    _Super:SetEnableDataTable()
    ::AddClass("table")
    ::AddClass("table-striped")
    ::AddClass("table-hover")
return(self)

method SetTitle(cTableTitle) class WebExTable
    paramtype 1 var cTableTitle as character optional default ""
    ::cTableTitle:=cTableTitle
return(self)

method SetTitleBefore(lTableTitleBefore) class WebExTable
    paramtype 1 var lTableTitleBefore as logical optional default .F.
    ::lTableTitleBefore:=lTableTitleBefore
return(self)

method AddColumnHeader(cTableColummLabel) class WebExTable
    local oTH:=WebExControl():New("th") as object
    paramtype 1 var cTableColummLabel as character
    oTH:SetContent(cTableColummLabel)
    ::jTableHeader[oTH:GetID()]:=oTH
return(oTH)

method BuildHeader() class WebExTable
    local oTH as object
    local oTR:=WebExControl():New("tr") as object
    if (::lTableExpandable)
        oTH:=WebExControl():New("th")
        oTH:SetContent("")
        oTR:AddChild(oTH)
    endif
    aEval(::jTableHeader:GetNames(),{|cName|oTR:AddChild(::jTableHeader[cName])})
    ::oTableTHead:AddChild(oTR)
    ::jTableHeader:=JSONObject():New()
return(self)

method AddCell(xTableCellValue) class WebExTable
    local oTD:=WebExControl():New("td") as object
    oTD:SetContent(cValToChar(xTableCellValue))
    ::jTableDetail[oTD:GetID()]:=oTD
return(oTD)

method BuildBodyRow(cDataHTML) class WebExTable
    local cIDPrefix as character
    local oTD as object
    local oTR:=WebExControl():New("tr") as object
    local oButton as object
    if (::lTableExpandable)
        paramtype 1 var cDataHTML as character optional
        cIDPrefix:=::GetFixedID()
        oButton:=WebExControl():New("button")
        oButton:AddClass("btn")
        oButton:AddClass("btn-sm")
        oButton:AddClass("btn-primary")
        oButton:SetAttr("onclick",cIDPrefix+"_expandRow(this)")
        if (!Empty(cDataHTML))
            oButton:SetAttr("data-html",cDataHTML)
        endif
        oButton:SetContent("+")
        oTD:=WebExControl():New("td")
        oTD:AddChild(oButton)
        oTR:AddChild(oTD)
    endif
    aEval(::jTableDetail:GetNames(),{|cName|oTR:AddChild(::jTableDetail[cName])})
    ::oTableTBody:AddChild(oTR)
    ::jTableDetail:=JSONObject():New()
return(self)

method EnableDrillDown() class WebExTable
    ::lTableExpandable:=.T.
return(self)

method RenderHTML() class WebExTable

    local cHTML as character
    local cScript as character

    local oCaption as object

    local oFWWebExScript as object

    if (!Empty(::cTableTitle))
        ::AddClass(if(::lTableTitleBefore,"caption-top","caption-bottom"))
        oCaption:=WebExControl():New("caption")
        oCaption:AddClass("text-center")
        oCaption:AddClass("fw-bold")
        oCaption:SetContent(::cTableTitle)
        ::AddChild(oCaption)
    endif

    ::AddChild(::oTableTHead)
    ::AddChild(::oTableTBody)

    if (::lTableExpandable)
        // Adiciona script de expandRow com ID prefixado
        oFWWebExScript:=WebExScript():New()
        //TODO: fetch real content via AJAX and update td.innerHTML
        beginContent var cScript
            function __cID___expandRow(button) {
                const tr = button.closest('tr');
                if (tr.nextSibling && tr.nextSibling.classList.contains('child-row')) {
                    tr.nextSibling.remove();
                    button.innerText = '+';
                    return;
                }
                const td = document.createElement('td');
                td.colSpan = tr.children.length;
                td.innerHTML = button.getAttribute('data-html') || '<div class=\"text-muted\">Loading...</div>';
                const newRow = document.createElement('tr');
                newRow.classList.add('child-row');
                newRow.appendChild(td);
                tr.parentNode.insertBefore(newRow, tr.nextSibling);
                button.innerText = '-';
            }
        endContent
        cScript:=StrTran(cScript,"__cID__",::GetFixedID())
        oFWWebExScript:SetContent(cScript)
    endif

    cHTML:=_Super:RenderHTML()

return(cHTML)
