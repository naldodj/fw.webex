/*
  __                            _
 / _|__      ____      __  ___ | |__    ___ __  __
| |_ \ \ /\ / /\ \ /\ / / / _ \| '_ \  / _ \\ \/ /
|  _| \ V  V /  \ V  V / |  __/| |_) ||  __/ >  <
|_|    \_/\_/    \_/\_/   \___||_.__/  \___|/_/\_\

Released to Public Domain.
--------------------------------------------------------------------------------------
*/

#include "fw.webex.th"

static __aVoidTags:={"area","base","br","col","embed","hr","img","input","link","meta","source","track","wbr"} as array

static __cID as character
static __cCRLF:=CRLF as character
static __cTmpPathUserInfo as character

static __jAssets:=JSONObject():New() as json
static __jHeader:=JSONObject():New() as json
static __jScripts:=JSONObject():New() as json
static __jFeatures:={;
    "lChartEnabled":.F.;
   ,"lIconsEnabled":.F.;
   ,"lDataTableEnabled":.F.;
} as json

namespace FWWebEx

class WebExControl

    protected data cID as character
    protected data cHTML as character
    protected data cType as character
    protected data cContent as character
    protected data cFixedID as character

    protected data cFWWebExTmpPath as character

    protected data cLocalAssetsFilePath as character
    protected data cExternalAssetsFilePath as character

    protected data jAttrs as json
    protected data jChildren as json

    protected data lChartEnabled as logical
    protected data lIconsEnabled as logical
    protected data lExternalAssets as logical
    protected data lRenderChildren as logical
    protected data lDataTableEnabled as logical

    public method New(cType as character) as object

    public method NewID() as character
    public method GetID() as character
    public method SetID(cID as character) as object
    public method ResetID() as object

    public method SetFixedID(cFixedID as character) as character
    public method GetFixedID() as character

    public method GetType() as character
    public method SetType(cType) as character

    public method IsKindOf(cClass as character,lParentTree as logical) as logical

    public method ClassName() as character
    public method ClassFullName() as character

    public method SetFromObject(oSource as object) as object
    public method MergeFromObject(oSource as object) as object

    public method GetMemberData(cMember as character,xDefault as variant,lSuperClass as logical) as variant
    public method SetMemberData(cMember as character,xValue as variant,lSuperClass as logical) as variant

    public method SetAttr(cAttr as character,cAttrValues as variant) as object
    public method GetAttr(cAttr as character) as character
    public method GetAttrArray(cAttr as character) as array
    public method HasAttr(cAttr as character,/*@*/aAttr as array) as logical
    public method DelAttr(cAttr as character,/*@*/lDelAttr as logical) as object
    public method DelAllAttr(/*@*/lDelAllAttr as logical) as object

    public method HasAttrValue(cAttr as character,cAttrValue as character,/*@*/aAttr as array) as logical
    public method DelAttrValue(cAttr as character,cAttrValue as character,/*@*/aAttr as array,lDelAttrValue as logical) as object
    public method DelAttrValueRegex(cAttr as character,cAttrValueRegex as character,/*@*/aAttr as array,lDelAttrValue as logical) as object

    public method GetContent() as character
    public method SetContent(cContent as character) as object
    public method ContentIsNull() as logical

    public method GetFWWebExTmpPath() as character
    public method SetFWWebExTmpPath(cFWWebExTmpPath as character) as object
    public method ObliterateFWWebExTmpFiles(lNoMercy as logical) as object

    public method GetLocalAssetsFilePath() as character
    public method SetLocalAssetsFilePath(cLocalAssetsFilePath as character) as character

    public method GetExternalAssetsFilePath() as character
    public method SetExternalAssetsFilePath(cExternalAssetsFilePath as character) as character

    public method GetJSONAttrs() as json
    public method GetJSONChildren() as json

    public method AddChild(oChild as object) as object

    public method GetHeader() as json
    public method AddInHeader(oChild as object) as object
    public method FindInHeader(cID as character) as logical

    public method GetScripts() as json
    public method GetHeadScripts() as json
    public method GetPageScripts() as json
    public method GetPageScriptBundle() as json

    public method FindInHeadScripts(cID as character) as logical
    public method FindInPageScripts(cID as character) as logical

    public method ChangeInHeadScripts(cID as character,oScript as object) as logical
    public method ChangeInPageScripts(cID as character,oScript as object) as logical

    public method AddScript(oScript as object) as object

    public method RenderHTML() as character
    public method SetRenderChildren(lRenderChildren as logical) as object

    public method GetExternalAssets() as logical
    public method SetExternalAssets(lExternalAssets as logical) as object
    public method ExternalAssetsIsEnabled() as logical

    public method AddAssets(cType as character,cLocal as character,cRemote as character) as json
    public method GetAssets() as json
    public method DelAssets() as json

    public method AddClass(cNewClass as character) as object
    public method HasClass(/*[@]*/cClass as character,/*@*/aClasses as array) as logical
    public method DelClass(cClass as character,/*@*/lDelClass as logical) as object
    public method DelClassRegex(cClassRegex as character,/*@*/lDelClass as logical) as object

    public method GetEnableChart() as logical
    public method SetEnableChart(lChartEnabled as logical) as object

    public method GetEnableIcons() as logical
    public method SetEnableIcons(lIconsEnabled as logical) as object

    public method GetEnableDataTable() as logical
    public method SetEnableDataTable(lDataTableEnabled as logical) as object

    public method Clean() as variant
    public method RemoveScripts() as variant
    public method DisableFeatures() as variant

    public method Clone() as object
    protected method __CloneNewInstance() as object
    protected method __CloneCompexData(xComplex as variant) as variant

    public method DumpDOM(nLevel as numeric) as character

endclass

method New(cType) class WebExControl
    paramtype 1 var cType as character optional default "div"
    ::jAttrs:=JSONObject():New()
    ::jChildren:=JSONObject():New()
    ::SetID(::NewID())
    ::SetType(cType)
    ::SetContent(FWWEBEX_WEB_NULL_CONTENT)
    ::SetFWWebExTmpPath()
    ::lChartEnabled:=__jFeatures["lChartEnabled"]
    ::lIconsEnabled:=__jFeatures["lIconsEnabled"]
    ::lDataTableEnabled:=__jFeatures["lDataTableEnabled"]
    ::lRenderChildren:=.T.
    ::lExternalAssets:=.F.
return(self)

method GetID() class WebExControl
    local cID:=::cID as character
    if (Empty(cID))
        cID:=::NewID()
        ::cID:=cID
    endif
return(cID)

method SetID(cID) class WebExControl
    paramtype 1 var cID as character optional default ::GetID()
    if (Empty(cID))
        cID:=::GetID()
    endif
    ::cID:=cID
return(self)

method NewID() class WebExControl
    if (Empty(__cID))
        ::ResetID()
    endif
    __cID:=__Soma1(__cID)
return((self:ClassName()+"_"+__cID))

method ResetID() class WebExControl
    __cID:=Replicate("0",FWWEBEX_ID_MAX_SIZE)
return(self)

method SetFixedID(cFixedID) class WebExControl
    paramtype 1 var cFixedID as character optional default ::GetID()
    ::cFixedID:=cFixedID
return(self)

method GetFixedID() class WebExControl
    local cFixedID as character
    cFixedID:=if(Empty(::cFixedID),::GetID(),::cFixedID)
return(cFixedID)

method GetType() class WebExControl
return(::cType)

method SetType(cType) class WebExControl
    paramtype 1 var cType as character
    ::cType:=Lower(cType)
return(self)

method IsKindOf(cClass,lParentTree) class WebExControl

    local aParents as array

    local cThisClass as character
    local cTargetClass as character

    local lIsKindOf as logical

    local nParent as numeric

    paramtype 1 var cClass as character
    paramtype 2 var lParentTree as logical optional default .F.

    cThisClass:=self:ClassFullName()
    cTargetClass:=Upper(AllTrim(cClass))
    if (!Left(cTargetClass,8)=="FWWEBEX.")
        cTargetClass:=("FWWEBEX."+cTargetClass)
    endif

    lIsKindOf:=(cThisClass==cTargetClass)

    if ((!lIsKindOf).and.(lParentTree))
        aParents:=GetParentTree(self)
        nParent:=aScan(aParents,{|cClassName|(cClassName==cTargetClass)})
        FWFreeArray(@aParents)
        lIsKindOf:=(nParent>0)
    endif

return(lIsKindOf)

method ClassName() class WebExControl
    local cClassName:=::ClassFullName()
    //Remove NameSpace. PARMTYPE.CH, ainda, nao tem suporte para NameSpace.
    cClassName:=StrTran(cClassName,"FWWEBEX.","")
return(cClassName)

method ClassFullName() class WebExControl
return(GetClassName(self))

method SetFromObject(oSource) class WebExControl

    local aMemberData as array

    local cKey as character
    local cData as character

    local cSourceClass as character
    local cTargetClass as character

    local i as numeric

    local xValue as variant

    paramtype 1 var oSource as object

    cSourceClass:=GetClassName(oSource)
    cTargetClass:=GetClassName(self)

    if (cTargetClass==cSourceClass)
        private pFromObjSelf:=oSource as object
        aMemberData:=aClone(ClassDataArr(oSource,.T.))
        for i:=1 to Len(aMemberData)
            cKey:=aMemberData[i][1]
            cData:="pFromObjSelf"
            cData+=":"
            cData+=cKey
            xValue:=&(cData)
            self:SetMemberData(cKey,xValue,.T.)
        next i
        FWFreeArray(@aMemberData)
    endif

return(self)

method MergeFromObject(oSource) class WebExControl

    local cSourceClass as character
    local cTargetClass as character

    paramtype 1 var oSource as object

    cSourceClass:=GetClassName(oSource)
    cTargetClass:=GetClassName(self)

    if (cTargetClass==cSourceClass)
        oSource:SetID(::GetID())
        oSource:SetFixedID(::GetFixedID())
        ::SetFromObject(oSource)
    endif

return(self)

method GetMemberData(cMember,xDefault,lSuperClass) class WebExControl

    local aClassDataArr as array

    local nAT as numeric

    local xValue as variant

    paramtype 1 var cMember as character optional default ""
    if (xDefault!=nil)
        paramtype 2 var xDefault as array,block,character,json,logical,numeric,object
    endif
    paramtype 3 var lSuperClass as logical optional default .T.

    if (!Empty(cMember))
        if (AttIsMemberOf(self,cMember,lSuperClass))
            aClassDataArr:=ClassDataArr(self,lSuperClass)
            cMember:=Upper(AllTrim(cMember))
            nAT:=aScan(aClassDataArr,{|x|(x[1]==cMember)})
            if (nAT>0)
                xValue:=aClassDataArr[nAT][2]
            else
                xValue:=xDefault
            endif
        else
            xValue:=xDefault
        endif
    else
        xValue:=aClone(ClassDataArr(self,lSuperClass))
    endif

return(xValue)

method SetMemberData(cMember,xValue,lSuperClass) class WebExControl
    local cType as character
    local cData as character
    local lSetMemberData as logical
    paramtype 1 var cMember as character
    if (xValue!=nil)
        paramtype 2 var xValue as array,block,character,json,logical,numeric,object
    endif
    paramtype 3 var lSuperClass as logical optional default .T.
    lSetMemberData:=AttIsMemberOf(self,cMember,lSuperClass)
    if (lSetMemberData)
        private pSetMemberDataSelf:=self as object
        cData:="pSetMemberDataSelf"
        cData+=":"
        cData+=cMember
        cType:=ValType(xValue)
        if ((cType$"A|J|O").and.(FWIsInCallStack("CLONE")))
            xValue:=self:__CloneCompexData(xValue)
        endif
        &(cData):=xValue
    endif
return(lSetMemberData)

method SetAttr(cAttr,cAttrValues) class WebExControl
    paramtype 1 var cAttr as character
    paramtype 2 var cAttrValues as character optional default cAttr
    cAttr:=Lower(cAttr)
    if (cAttr=="id")
        ::SetFixedID(cAttrValues)
    endif
    ::jAttrs[cAttr]:=cAttrValues
return(self)

method GetAttr(cAttr) class WebExControl
    local cAttrValues as character
    paramtype 1 var cAttr as character
    if (::HasAttr(cAttr))
        cAttrValues:=::jAttrs[cAttr]
    else
        cAttrValues:=""
    endif
return(cAttrValues)

method GetAttrArray(cAttr) class WebExControl
    local aAttrValues as array
    paramtype 1 var cAttr as character
    aAttrValues:=StrTokArr2(Lower(AllTrim(::GetAttr(cAttr)))," ")
return(aAttrValues)

method HasAttr(cAttr,cAttrValue,aAttr) class WebExControl
    local lHasAttr as logical
    paramtype 1 var cAttr as character
    lHasAttr:=::jAttrs:HasProperty(cAttr)
return(lHasAttr)

method DelAttr(cAttr,lDelAttr) class WebExControl
    paramtype 1 var cAttr as character
    paramtype 2 var lDelAttr as logical optional default .F.
    lDelAttr:=(!::jAttrs:HasProperty(cAttr))
    if (!lDelAttr)
        lDelAttr:=::jAttrs:DelName(cAttr)
    endif
return(self)

method DelAllAttr(lDelAllAttr) class WebExControl
    local aAttr as array
    local cAttr as character
    local i as numeric
    paramtype 1 var lDelAllAttr as logical
    aAttr:=::jAttrs:GetNames()
    for i:=1 to Len(aNames)
        cAttr:=aAttr[i]
        ::DelAttr(cAttr,@lDelAttr)
    next i
return(self)

method HasAttrValue(cAttr,cAttrValue,aAttr) class WebExControl
    local lHasAttrValue as logical
    local nHasAttr as numeric
    paramtype 1 var cAttr as character
    paramtype 2 var cAttrValue as character optional default cAttr
    paramtype 3 var aAttr as array optional
    aAttr:=::GetAttrArray(cAttr)
    cAttrValue:=Lower(AllTrim(cAttrValue))
    nHasAttr:=aScan(aAttr,{|cToken as character|(cToken==cAttrValue)})
    lHasAttrValue:=(nHasAttr>0)
return(lHasAttrValue)

method DelAttrValue(cAttr,cAttrValue,aAttr,lDelAttrValue) class WebExControl

    local aAttr as array

    local cNewValue as character

    local oForEach as object

    paramtype 1 var cAttr as character
    paramtype 2 var cAttrValue as character optional default cAttr
    paramtype 3 var aAttr as array optional
    paramtype 4 var lDelAttrValue as logical optional default .F.

    if (Empty(aAttr))
        lDelAttrValue:=::HasAttrValue(cAttr,cAttrValue,@aAttr)
    else
        lDelAttrValue:=(aScan(aAttr,{|cToken|cToken==cAttrValue})>0)
    endif

    if (lDelAttrValue)
        cNewValue:=""
        oForEach:=ForEach():New(aAttr,{|k as numeric,v as character,i as numeric|;
            cNewValue+=if(!(v==cAttrValue),v,""),;
            cNewValue+=if(!oForEach:__enumIsLast()," ","");
            },;
            .F.;
        )
        oForEach:Eval()
        FreeObj(@oForEach)
        cNewValue:=AllTrim(cNewValue)
        ::SetAttr(cAttr,cNewValue)
        FWFreeArray(@aAttr)
        lDelAttrValue:=(!::HasAttrValue(cAttr,cAttrValue,@aAttr))
    endif

return(self)

method DelAttrValueRegex(cAttr,cAttrValueRegex,/*@*/aAttr,lDelAttrValue) class WebExControl

    local aAttrRemained as array

    local cAttrValue as character

    local lDeleted:=.F. as logical

    local nAttr as numeric
    local nAttrs as numeric

    local oTRegEx as object

    paramtype 1 var cAttr as character
    paramtype 2 var cAttrValueRegex as character optional default cAttr
    paramtype 3 var aAttr as array optional
    paramtype 4 var lDelAttrValue as logical optional default .F.

    aAttr:=::GetAttrArray(cAttr)
    nAttrs:=Len(aAttr)
    lDeleted:=(nAttrs>0)
    if (lDeleted)
        lDeleted:=.F.
        oTRegEx:=TRegEx():New(cAttrValueRegex)
        for nAttr:=1 to nAttrs
            cAttrValue:=aAttr[nAttr]
            if (oTRegEx:Search(cAttrValue))
                ::DelAttrValue(cAttr,cAttrValue,@aAttrRemained,@lDelAttrValue)
                if (!lDeleted)
                    lDeleted:=lDelAttrValue
                endif
            endif
        next nAttr
        FreeObj(@oTRegEx)
    endif

    if ((ValType(aAttrRemained)=="A"))
        FWFreeArray(@aAttr)
        aAttr:=aClone(aAttrRemained)
        FWFreeArray(@aAttrRemained)
    endif

    lDelClass:=lDeleted

return(self)

method GetContent() class WebExControl
return(::cContent)

method SetContent(cContent) class WebExControl
   paramtype 1 var cContent as character
   ::cContent:=cContent
return(self)

method ContentIsNull() class WebExControl
    local lContentIsNull as logical
    lContentIsNull:=((::cContent==FWWEBEX_WEB_NULL_CONTENT).or.(Empty(::cContent)))
return(lContentIsNull)

method GetFWWebExTmpPath() class WebExControl
    if (Empty(::cFWWebExTmpPath))
        ::SetFWWebExTmpPath()
    endif
return(::cFWWebExTmpPath)

method SetFWWebExTmpPath(cFWWebExTmpPath)  class WebExControl
    local aUserInfo as array
    local cEnvServer as character
    local nUserInfo as numeric
    paramtype 1 var cFWWebExTmpPath as character optional default FWWEBEX_WEB_TMP_PATH
    ::cFWWebExTmpPath:=cFWWebExTmpPath
    if ((Type("cEmpAnt")=="C").and.(!Empty(cEmpAnt)))
        if (Right(::cFWWebExTmpPath,1)!="\")
            ::cFWWebExTmpPath+="\"
        endif
        ::cFWWebExTmpPath+=AllTrim(cEmpAnt)
        ::cFWWebExTmpPath+="\"
    endif
    if ((Type("__cUserID")=="C").and.(!Empty(AllTrim(__cUserID))))
        if (Right(::cFWWebExTmpPath,1)!="\")
            ::cFWWebExTmpPath+="\"
        endif
        ::cFWWebExTmpPath+=AllTrim(__cUserID)
        ::cFWWebExTmpPath+="\"
    endif
    if (Empty(__cTmpPathUserInfo))
        aUserInfo:=GetUserInfoArray()
        if (!Empty(aUserInfo))
            cEnvServer:=Upper(AllTrim(GetEnvServer()))
            nUserInfo:=aScan(;
                aUserInfo;
                ,{|x|;
                    (;
                        (!Empty(x[1]));
                        .and.;
                        (!Empty(x[2]));
                        .and.;
                        (!"JOB"$Upper(x[15]));
                        .and.;
                        (AllTrim(Upper(x[6]))==cEnvServer);
                    );
                };
            )
            if (nUserInfo>0)
                __cTmpPathUserInfo:=AllTrim(aUserInfo[nUserInfo][2])
                __cTmpPathUserInfo+="\"
                __cTmpPathUserInfo+=AllTrim(aUserInfo[nUserInfo][1])
                __cTmpPathUserInfo+="\"
            endif
        endif
        FWFreeArray(@aUserInfo)
    endif
    if (!Empty(__cTmpPathUserInfo))
        if (Right(::cFWWebExTmpPath,1)!="\")
            ::cFWWebExTmpPath+="\"
        endif
        ::cFWWebExTmpPath+=__cTmpPathUserInfo
    endif
    if (IsSrvUnix())
        ::cFWWebExTmpPath:=StrTran(::cFWWebExTmpPath,"\","/")
    endif
    ::cFWWebExTmpPath:=Lower(::cFWWebExTmpPath)
    if (!lIsDir(::cFWWebExTmpPath))
        FWMakeDir(::cFWWebExTmpPath,.F.)
    endif
return(self)

method ObliterateFWWebExTmpFiles(lNoMercy) class WebExControl
    local aFiles as array
    local cNow:=Time() as character
    local cFWWebExTmpPath:=::GetFWWebExTmpPath() as character
    local dToday:=Date() as date
    paramtype 1 var lNoMercy as logical optional default .F.
    aFiles:=directory(cFWWebExTmpPath+"*.*")
    if (lNoMercy)
        aEval(aFiles,{|e|fErase(cFWWebExTmpPath+e[F_NAME])})
    else
        aEval(aFiles;
            ,{|e|;
                if(;
                    (e[F_DATE]<dToday);
                    .or.;
                    (;
                        (e[F_DATE]==dToday);
                        .and.;
                        (ElapTime(e[F_TIME],cNow)>="03:00:00");
                    );
                    ,fErase(cFWWebExTmpPath+e[F_NAME]);
                    ,nil;
                );
            };
        )
    endif
    FWFreeArray(@aFiles)
return(self)

method GetLocalAssetsFilePath() class WebExControl
    paramtype 1 var cLocalAssetsFilePath as character
return(::cLocalAssetsFilePath)

method SetLocalAssetsFilePath(cLocalAssetsFilePath) class WebExControl
    paramtype 1 var cLocalAssetsFilePath as character
return(self)

method GetExternalAssetsFilePath() class WebExControl
return(::cExternalAssetsFilePath)

method SetExternalAssetsFilePath(cExternalAssetsFilePath) class WebExControl
    paramtype 1 var cExternalAssetsFilePath as character
    ::cExternalAssetsFilePath:=cExternalAssetsFilePath
return(self)

method GetJSONAttrs() class WebExControl
return(::jAttrs)

method GetJSONChildren()class WebExControl
return(::jChildren)

method AddChild(oChild) class WebExControl
    local cClassName as character
    paramtype 1 var oChild as object
    cClassName:=GetClassName(oChild)
    if (!Left(cClassName,8)=="FWWEBEX.")
        CLASSPARAMEXCEPTION PARAM 1 VAR oChild TEXT cClassName MESSAGE "Object must belong to the FWWEBEX namespace. Got '"+cClassName+"' instead. Check your class declaration."
    elseif ((!MethIsMemberOf(oChild,"ISKINDOF",.T.)).or.(!oChild:IsKindOf("WEBEXCONTROL",.T.)))
        CLASSPARAMEXCEPTION PARAM 1 VAR oChild TEXT cClassName MESSAGE "Object must inherit from FWWEBEX.WebExControl. Received: "+cClassName+"."
    endif
    ::jChildren[oChild:GetID()]:=oChild
return(self)

method GetHeader() class WebExControl
return(__jHeader)

method AddInHeader(oChild) class WebExControl
    paramtype 1 var oChild as object
    cClassName:=GetClassName(oChild)
    if (!Left(cClassName,8)=="FWWEBEX.")
        CLASSPARAMEXCEPTION PARAM 1 VAR oChild TEXT cClassName MESSAGE "Object must belong to the FWWEBEX namespace. Got '"+cClassName+"' instead. Check your class declaration."
    elseif ((!MethIsMemberOf(oChild,"ISKINDOF",.T.)).or.(!oChild:IsKindOf("WEBEXCONTROL",.T.)))
        CLASSPARAMEXCEPTION PARAM 1 VAR oChild TEXT cClassName MESSAGE "Object must inherit from FWWEBEX.WebExControl. Received: "+cClassName+"."
    endif
    __jHeader[oChild:GetID()]:=oChild
return(oChild)

method FindInHeader(cID) class WebExControl
    local lFound as logical
    paramtype 1 var cID as character
    lFound:=__jHeader:HasProperty(cID)
return(lFound)

method GetScripts() class WebExControl
return(__jScripts)

method GetHeadScripts() class WebExControl
    local jHeadScripts as json
    if (__jScripts:HasProperty("head"))
        jHeadScripts:=__jScripts["head"]
    else
        jHeadScripts:=JSONObject():New()
    endif
return(jHeadScripts)

method GetPageScripts() class WebExControl

    local jPageScripts as json

    if (__jScripts:HasProperty("page"))
        jPageScripts:=__jScripts["page"]
    else
        jPageScripts:=JSONObject():New()
    endif

return(jPageScripts)

method GetPageScriptBundle() class WebExControl

    local aScripts as array

    local cID as character
    local cSrc as character
    local cContent as character

    local jPageScripts as json

    local lExternalAssets:=.F. as logical

    local nScript as numeric
    local nScripts as numeric

    local oWebExScript as object

    if (__jScripts:HasProperty("page"))
        aScripts:=__jScripts["page"]:GetNames()
        nScripts:=Len(aScripts)
        if (nScripts>1)
            cSrc:=__cCRLF
            for nScript:=1 to nScripts
                cID:=aScripts[nScript]
                oWebExScript:=__jScripts["page"][cID]
                cContent:=if(ValType(oWebExScript)=="O",oWebExScript:GetContent(),FWWEBEX_WEB_NULL_CONTENT)
                if (cContent==FWWEBEX_WEB_NULL_CONTENT)
                    loop
                endif
                if (::ExternalAssetsIsEnabled())
                    if (!lExternalAssets)
                        lExternalAssets:=oWebExScript:GetExternalAssets()
                    endif
                endif
                cSrc+="/* --- script: ["+cID+"] --- */"
                cSrc+=__cCRLF
                cSrc+=cContent
                cSrc+=__cCRLF
                cSrc+="/* "+Replicate("-",(18+Len(cID)))+" */"
                cSrc+=__cCRLF
            next nScript
            //ScriptBundle
            oWebExScript:=WebExScript():New()
            oWebExScript:SetContent(cSrc,.F.)
            if (::ExternalAssetsIsEnabled())
                oWebExScript:SetExternalAssets(lExternalAssets)
            endif
            jPageScripts:=JSONObject():New()
            jPageScripts[oWebExScript:GetID()]:=oWebExScript
        else
            jPageScripts:=__jScripts["page"]
        endif
        FWFreeArray(@aScripts)
    else
        jPageScripts:=JSONObject():New()
    endif

return(jPageScripts)

method FindInHeadScripts(cID) class WebExControl
    local jHeadScripts as json
    local lFound as logical
    paramtype 1 var cID as character
    jHeadScripts:=::GetHeadScripts()
    lFound:=jHeadScripts:HasProperty(cID)
return(lFound)

method FindInPageScripts(cID) class WebExControl
    local jPageScripts as json
    local lFound as logical
    paramtype 1 var cID as character
    jPageScripts:=::GetPageScripts()
    lFound:=jPageScripts:HasProperty(cID)
return(lFound)

method ChangeInHeadScripts(cID,oScript) class WebExControl
    local jHeadScripts as json
    paramtype 1 var cID as character
    paramtype 2 var oScript as object class WebExScript
    if (::FindInHeadScripts(cID))
        jHeadScripts:=::GetHeadScripts()
        jHeadScripts[cID]:=oScript
    endif
return(self)

method ChangeInPageScripts(cID,oScript) class WebExControl
    local jPageScripts as json
    paramtype 1 var cID as character
    paramtype 2 var oScript as object class WebExScript
    if (::FindInPageScripts(cID))
        jPageScripts:=::GetPageScripts()
        jPageScripts[cID]:=oScript
    endif
return(self)

method AddScript(oScript) class WebExControl
    local cType as character
    paramtype 1 var oScript as object class WebExScript
    if (!::FindInHeader(oScript:GetID()))
        cType:=if(oScript:GetScriptInPage(),"page","head")
        if (!__jScripts:HasProperty(cType))
            __jScripts[cType]:=JSONObject():New()
        endif
        __jScripts[cType][oScript:GetID()]:=oScript
    endif
return(oScript)

method RenderHTML() class WebExControl

    local aAttrs as array
    local aChildren as array

    local cKey as character
    local cHTML as character
    local cContent as character
    local cLowerType as character

    local lHTMLAssetsToFile:=.F. as logical

    local nAttr as numeric
    local nAttrs as numeric

    local nChild as numeric
    local nChilds as numeric

    local xVal as variant

    if ((::lRenderChildren).or.(Empty(::cHTML)))

        // Garante que tenha um ID unico
        if (!::jAttrs:HasProperty("id"))
            ::jAttrs["id"]:=::GetFixedID()
        endif

        cContent:=::cContent
        cLowerType:=::cType

        if ((::ExternalAssetsIsEnabled()).and.(::lExternalAssets).and.(cLowerType$"script|style").and.(cContent!=FWWEBEX_WEB_NULL_CONTENT))
            lHTMLAssetsToFile:=WebFileTools():HTMLAssetsToFile(;
                ::GetID();
                ,cLowerType;
                ,::cContent;
                ,::cFWWebExTmpPath;
                ,@::cExternalAssetsFilePath;
                ,@::cLocalAssetsFilePath;
            )
            if (lHTMLAssetsToFile)
                cContent:=FWWEBEX_WEB_NULL_CONTENT
                ::AddAssets(::GetID(),cLowerType,::cLocalAssetsFilePath,::cExternalAssetsFilePath)
            endif
        endif

        if (lHTMLAssetsToFile)

            cHTML:=""

        else

            cHTML:="<"+::cType

                if (cLowerType!="!--")
                    aAttrs:=::jAttrs:GetNames()
                    nAttrs:=Len(aAttrs)
                    for nAttr:=1 to nAttrs
                        cKey:=aAttrs[nAttr]
                        if (::jAttrs:HasProperty(cKey))
                            xVal:=::jAttrs[cKey]
                            if (valType(xVal)!="C")
                                xVal:=cValToChar(xVal)
                            endif
                            if (cKey==xVal)
                                cHTML+=" "+cKey
                            else
                                cHTML+=" "+cKey+'="'+xVal+'"'
                            endif
                        endif
                    next nAttr
                endif

            if (aScan(__aVoidTags,{|cType|(cType==cLowerType)})>0)

                cHTML+="/>"

            else

                if (cLowerType!="!--")
                    cHTML+=">"
                endif

                if (cContent!=FWWEBEX_WEB_NULL_CONTENT)
                    cHTML+=cContent
                endif

                aChildren:=::jChildren:GetNames()
                nChilds:=Len(aChildren)
                if (nChilds>0)
                    for nChild:=1 to nChilds
                        cKey:=aChildren[nChild]
                        if (::jChildren:HasProperty(cKey))
                            oChild:=::jChildren[cKey]
                            if (valType(oChild)=="O")
                                ::SetRenderChildren(::lRenderChildren)
                                cHTML+=oChild:RenderHTML()
                            endif
                        endif
                    next nChild
                endif

                if (cLowerType!="!--")
                    cHTML+="</"+::cType+">"
                else
                    cHTML+="-->"
                endif

            endif

        endif

        ::cHTML:=cHTML

    else

        cHTML:=::cHTML

    endif

return(cHTML)

method SetRenderChildren(lRenderChildren)  class WebExControl
    paramtype 1 var lRenderChildren as logical optional default .T.
    ::lRenderChildren:=lRenderChildren
return(self)

method GetExternalAssets() class WebExControl
return(::lExternalAssets)

method SetExternalAssets(lExternalAssets) class WebExControl
    paramtype 1 var lExternalAssets as logical optional default .F.
    ::lExternalAssets:=(::ExternalAssetsIsEnabled()).and.((lExternalAssets).and.(::cType$"script|style"))
    ::cLocalAssetsFilePath:=""
    ::cExternalAssetsFilePath:=""
return(self)

method ExternalAssetsIsEnabled() class WebExControl
/*
    TODO:
    Protheus nao esta preparado para lExternalAssets.
    Mesmo que o arquivo exista, o servidor ta respondendo com MIME type 'text/html'".
    O problema esta confirmado header: **content-type: text/html;charset=utf-8**
    Ou seja, o Protheus (via SmartClient WebApp) esta devolvendo o arquivo .js como MIME type errado.
    E ai o navegador mete o pe no freio com: "Refused to execute script [...] MIME type 'text/html'"
    ------------------------------------------------------------------------------------------------
    ### Issue: Protheus AppServer returns wrong MIME type for external assets #2
*/
return(FWWEBEX_EXTERNAL_ASSETS_IS_ENABLED)

method AddAssets(cID,cType,cLocal,cRemote) class WebExControl

    paramtype 1 var cID as character
    paramtype 2 var cType as character
    paramtype 3 var cLocal as character
    paramtype 4 var cRemote as character

    __jAssets[cID]:=JSONObject():New()
    __jAssets[cID]["id"]:=cID
    __jAssets[cID]["type"]:=cType
    __jAssets[cID]["local"]:=cLocal
    __jAssets[cID]["remote"]:=cRemote

return(__jAssets)

method GetAssets() class WebExControl
return(__jAssets)

method DelAssets() class WebExControl
    aEval(__jAssets:GetNames(),{|cName|__jAssets:DelName(cName)})
return(__jAssets)

method AddClass(cNewClass) class WebExControl
    local aNewClass as array
    local cClass as character
    local cClassItem as character
    local i as numeric
    paramtype 1 var cNewClass as character
    if (!::HasAttr("class"))
        ::SetAttr("class",Lower(AllTrim(cNewClass)))
    else
        cClass:=AllTrim(::GetAttr("class"))
        aNewClass:=StrTokArr2(Lower(AllTrim(cNewClass))," ")
        for i:=1 to Len(aNewClass)
            cClassItem:=aNewClass[i]
            if (!::HasAttrValue("class",cClassItem))
                cClass+=" "+cClassItem
            endif
        next i
        FWFreeArray(@aNewClass)
        ::DelAttr("class")
        ::SetAttr("class",cClass)
    endif
return(self)

method HasClass(cClass,aClasses) class WebExControl
    local lHasClass as logical
    lHasClass:=::HasAttrValue("class",cClass,@aClasses)
return(lHasClass)

method DelClass(cClass,lDelClass) class WebExControl
    local aClasses as array
    paramtype 1 var cClass as character
    paramtype 2 var lDelClass as logical optional default .F.
    lDelClass:=::HasAttrValue("class",cClass,@aClasses)
    if (lDelClass)
        ::DelAttrValue("class",cClass,@aClasses,@lDelClass)
    endif
    FWFreeArray(@aClasses)
return(self)

method DelClassRegex(cClassRegex,lDelClass) class WebExControl
return(::DelAttrValueRegex("class",cClassRegex,@lDelClass))

method GetEnableChart() class WebExControl
return(::lChartEnabled)

method SetEnableChart(lChartEnabled) class WebExControl

    paramtype 1 var lChartEnabled as logical optional default .T.

    if ((lChartEnabled).and.(!::lChartEnabled))
        ::lChartEnabled:=.T.
        __jFeatures["lChartEnabled"]:=::lChartEnabled
        //Chart
            WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                .:SetContent("Chart")
                .:AddInHeader(.this)
            END WEBEXOBJECT NOADDCHILD
            WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                .:SetContent("https://cdn.jsdelivr.net/npm/chart.js")
                .:AddInHeader(.this)
            END WEBEXOBJECT NOADDCHILD
        //Chart
    elseif ((!lChartEnabled).and.((__jFeatures["lChartEnabled"]).or.(::lChartEnabled)))
        ::lChartEnabled:=lChartEnabled
        __jFeatures["lChartEnabled"]:=::lChartEnabled
    endif

return(self)

method GetEnableIcons() class WebExControl
return(::lIconsEnabled)

method SetEnableIcons(lIconsEnabled) class WebExControl

    paramtype 1 var lIconsEnabled as logical optional default .T.

    if ((lIconsEnabled).and.(!::lIconsEnabled))
        ::lIconsEnabled:=.T.
        __jFeatures["lIconsEnabled"]:=::lIconsEnabled
***************************************************************************************************************************
            //Bootstrap Icons
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("Bootstrap Icons")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //Bootstrao Icons
***************************************************************************************************************************
            //font-awesome Icons
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("font-awesome Icons")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdnjs.cloudflare.com/ajax/libs/font-awesome/latest/css/all.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //font-awesome Icons
***************************************************************************************************************************
            //Materialize Icons
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("Materialize Icons :: https://materializecss.com/icons.html")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://fonts.googleapis.com/icon?family=Material+Icons")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //Materialize
***************************************************************************************************************************
    elseif ((!lIconsEnabled).and.((__jFeatures["lIconsEnabled"]).or.(::lIconsEnabled)))
        ::lIconsEnabled:=lIconsEnabled
        __jFeatures["lIconsEnabled"]:=::lIconsEnabled
    endif

return(self)

method GetEnableDataTable() class WebExControl
return(::lDataTableEnabled)

method SetEnableDataTable(lDataTableEnabled) class WebExControl

    paramtype 1 var lDataTableEnabled as logical optional default .T.

    if ((lDataTableEnabled).and.(!::lDataTableEnabled))

        ::lDataTableEnabled:=.T.
        __jFeatures["lDataTableEnabled"]:=::lDataTableEnabled

        //DataTables
            WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                .:SetContent("https://cdn.datatables.net/")
                .:AddInHeader(.this)
            END WEBEXOBJECT NOADDCHILD
            WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                .:SetContent("DataTables 2.3.2 is the current stable release of DataTables")
                .:AddInHeader(.this)
            END WEBEXOBJECT NOADDCHILD
            WITH WEBEXOBJECT CLASS WebExControl TYPE link
                .:SetAttr("href","https://cdn.datatables.net/2.3.2/css/dataTables.bootstrap5.min.css")
                .:SetAttr("rel","stylesheet")
                .:AddInHeader(.this)
            END WEBEXOBJECT NOADDCHILD
            WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                .:SetContent("https://cdn.datatables.net/2.3.2/js/dataTables.min.js")
                .:AddInHeader(.this)
            END WEBEXOBJECT NOADDCHILD
            WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                .:SetContent("https://cdn.datatables.net/2.3.2/js/dataTables.bootstrap5.min.js")
                .:AddInHeader(.this)
            END WEBEXOBJECT NOADDCHILD
        //Data Tables
        ***************************************************************************************************************************
        //DataTables Extensions
            WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                .:SetContent("Extensions")
                .:AddInHeader(.this)
            END WEBEXOBJECT NOADDCHILD
            //Excel
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("Excel : https://cdnjs.com/libraries/jszip")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //Excel
        ***************************************************************************************************************************
            //PDF
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("PDF : https://cdnjs.com/libraries/pdfmake")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.12/pdfmake.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.12/vfs_fonts.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //PDF
        ***************************************************************************************************************************
            //AutoFill
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("AutoFill")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/autofill/2.7.0/css/autoFill.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/autofill/2.7.0/js/dataTables.autoFill.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/autofill/2.7.0/js/autoFill.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //AutoFill
        ***************************************************************************************************************************
            //Buttons
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("Buttons")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/buttons/3.2.3/css/buttons.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/buttons/3.2.3/js/dataTables.buttons.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/buttons/3.2.3/js/buttons.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/buttons/3.2.3/js/buttons.colVis.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/buttons/3.2.3/js/buttons.print.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/buttons/3.2.3/js/buttons.html5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //Buttons
        ***************************************************************************************************************************
            //ColReorder
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("ColReorder")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/colreorder/2.1.1/css/colReorder.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/colreorder/2.1.1/js/dataTables.colReorder.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/colreorder/2.1.1/js/colReorder.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //ColReorder
        ***************************************************************************************************************************
            //FixedColumns
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("FixedColumns")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/fixedcolumns/5.0.4/css/fixedColumns.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/fixedcolumns/5.0.4/js/dataTables.fixedColumns.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/fixedcolumns/5.0.4/js/fixedColumns.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //FixedColumns
        ***************************************************************************************************************************
            //FixedHeader
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("FixedHeader")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/fixedheader/4.0.3/css/fixedHeader.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/fixedheader/4.0.3/js/dataTables.fixedHeader.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/fixedheader/4.0.3/js/fixedHeader.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //FixedHeader
        ***************************************************************************************************************************
            //KeyTable
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("KeyTable")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/keytable/2.12.1/css/keyTable.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/keytable/2.12.1/js/dataTables.keyTable.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/keytable/2.12.1/js/keyTable.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //KeyTable
        ***************************************************************************************************************************
            //Responsive
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("Responsive")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/responsive/3.0.4/css/responsive.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/responsive/3.0.4/js/dataTables.responsive.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/responsive/3.0.4/js/responsive.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //Responsive
        ***************************************************************************************************************************
            //RowGroup
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("RowGroup")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/rowgroup/1.5.1/css/rowGroup.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/rowgroup/1.5.1/js/dataTables.rowGroup.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/rowgroup/1.5.1/js/rowGroup.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //RowGroup
        ***************************************************************************************************************************
            //RowReorder
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("RowReorder")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/rowreorder/1.5.0/css/rowReorder.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/rowreorder/1.5.0/js/dataTables.rowReorder.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/rowreorder/1.5.0/js/rowReorder.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //RowReorder
        ***************************************************************************************************************************
            //Scroller
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("Scroller")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/scroller/2.4.3/css/scroller.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/scroller/2.4.3/js/dataTables.scroller.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/scroller/2.4.3/js/scroller.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //Scroller
        ***************************************************************************************************************************
            //SearchBuilder
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("SearchBuilder")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/searchbuilder/1.8.2/css/searchBuilder.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/searchbuilder/1.8.2/js/dataTables.searchBuilder.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/searchbuilder/1.8.2/js/searchBuilder.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //SearchBuilder
        ***************************************************************************************************************************
            //SearchPanes
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("SearchPanes")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/searchpanes/2.3.3/css/searchPanes.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/searchpanes/2.3.3/js/dataTables.searchPanes.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/searchpanes/2.3.3/js/searchPanes.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //SearchPanes
        ***************************************************************************************************************************
            //Select
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("SearchPanes")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/select/3.0.1/css/select.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/select/3.0.1/js/dataTables.select.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/select/3.0.1/js/select.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //Select
        ***************************************************************************************************************************
            //StateRestore
                WITH WEBEXOBJECT CLASS WebExControl TYPE !--
                    .:SetContent("StateRestore")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExControl TYPE link
                    .:SetAttr("href","https://cdn.datatables.net/staterestore/1.4.1/css/stateRestore.bootstrap5.min.css")
                    .:SetAttr("rel","stylesheet")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/staterestore/1.4.1/js/dataTables.stateRestore.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
                WITH WEBEXOBJECT CLASS WebExScript ARGS .F.
                    .:SetContent("https://cdn.datatables.net/staterestore/1.4.1/js/stateRestore.bootstrap5.min.js")
                    .:AddInHeader(.this)
                END WEBEXOBJECT NOADDCHILD
            //Select
        //DataTables Extensions
        ***************************************************************************************************************************
    elseif ((!lDataTableEnabled).and.((__jFeatures["lDataTableEnabled"]).or.(::lDataTableEnabled)))
        ::lDataTableEnabled:=lDataTableEnabled
        __jFeatures["lDataTableEnabled"]:=lDataTableEnabled
    endif

return(self)

method Clean() class WebExControl
    ::ResetID()
    ::DelAssets()
    ::RemoveScripts()
    ::DisableFeatures()
return(nil)

method RemoveScripts() class WebExControl
    local jHeadScripts:=::GetHeadScripts() as json
    local jPageScripts:=::GetPageScripts() as json
    aEval(jHeadScripts:GetNames(),{|cName|jHeadScripts:DelName(cName)})
    aEval(jPageScripts:GetNames(),{|cName|jPageScripts:DelName(cName)})
return(nil)

method DisableFeatures() class WebExControl
    aEval(__jHeader:GetNames(),{|cName|__jHeader:DelName(cName)})
    aEval(__jFeatures:GetNames(),{|cFeature|__jFeatures[cFeature]:=.F.,self:SetMemberData(cFeature,.T.)})
return(nil)

method Clone() class WebExControl
    local oClone as object
    // Cria nova instancia do mesmo tipo
    oClone:=self:__CloneNewInstance()
    // Copia dados da classe
    oClone:SetFromObject(self)
return(oClone)

method __CloneNewInstance() class WebExControl

    local aClassMethArr as array

    local cParam as character
    local cClassName as character
    local cNewInstanceMethod as character

    local nATParam as numeric
    local nATMethod as numeric

    local nParam as numeric
    local nParams as numeric

    local oClone as object

    aClassMethArr:=ClassMethArr(self,.F.)
    nATMethod:=aScan(aClassMethArr,{|aMethod|aMethod[1]=="NEW"})

    if (nATMethod>0)
        cClassName:=GetClassName(self)
        private __aClassDataArrValue__:=ClassDataArr(self,.T.)
        nParams:=Len(aClassMethArr[nATMethod][2])
        cNewInstanceMethod:=cClassName+"():New("
        if (nParams>0)
            for nParam:=1 to nParams
                cParam:=aClassMethArr[nATMethod][2][nParam]
                nATParam:=aScan(__aClassDataArrValue__,{|aParam|aParam[1]==cParam})
                cNewInstanceMethod+=if(nATParam>0,"__aClassDataArrValue__["+LTrim(Str(nATParam))+"][2]","nil")
                if (nParam<nParams)
                    cNewInstanceMethod+=","
                endif
            next nParam
        endif
        cNewInstanceMethod+=")"
        oClone:=&(cNewInstanceMethod)
        FWFreeArray(@__aClassDataArrValue__)
    endif

    FWFreeArray(@aClassMethArr)

return(oClone)

method __CloneCompexData(xComplex) class WebExControl
    local aNames as array
    local cKey as character
    local cType as character
    local i as numeric
    local j as numeric
    local xClone as variant
    cType:=ValType(xComplex)
    do case
    case (cType=="A")
        j:=Len(xComplex)
        xClone:=Array(j)
        for i:=1 to Len(xComplex)
            xClone[i]:=self:__CloneCompexData(xComplex[i])
        next i
    case (cType=="J")
        xClone:=JSONObject():New()
        aNames:=xComplex:GetNames()
        j:=Len(aNames)
        for i:=1 to j
            cKey:=aNames[i]
            xClone[cKey]:=self:__CloneCompexData(xComplex[cKey])
        next i
    case (cType=="O")
        cClassName:=GetClassName(xComplex)
        if(;
            (!Left(cClassName,8)=="FWWEBEX.");
            .or.;
            (!MethIsMemberOf(xComplex,"CLONE",.T.));
            .or.;
            (!MethIsMemberOf(xComplex,"ISKINDOF",.T.));
            .or.;
            (!xComplex:IsKindOf("WEBEXCONTROL",.T.));
        )
            xClone:=xComplex
        else
            xClone:=xComplex:Clone()
        endif
    otherwise
        xClone:=xComplex
    end case
return(xClone)

method DumpDOM(nLevel) class WebExControl

    local aAttr as array
    local aChildren as array

    local cDOM as character

    local cID as character
    local cKey as character
    local cAttr as character
    local cType as character
    local cPrefix as character
    local cContent as character

    local i as numeric
    local nAttr as numeric

    local oChild as object

    paramtype 1 var nLevel as numeric optional default 0

    // Prefixo de identacao
    cPrefix:=Replicate("   ",nLevel)+"+---> "
    // Tipo do componente
    cType:=::cType
    // Monta linha do componente atual
    cDOM:=cPrefix+cType

    // ID, se existir
    if (::jAttrs:HasProperty("id"))
        cID:=::jAttrs["id"]
    else
        cID:=::GetFixedID()
    endif

    // Atributos
    aAttr:=::jAttrs:GetNames()
    nAttr:=Len(aAttr)
    cAttr:=""
    for i:=1 to nAttr
        cKey:=aAttr[i]
        cAttr+="("+cKey+"="+::jAttrs[cKey]+")"
        if (i<nAttr)
            cAttr+=","
        endif
    next i
    FWFreeArray(@aAttr)
    if (Right(cAttr,1)=",")
        cAttr:=SubStr(cAttr,1,(Len(cAttr)-1))
    endif
    if (!Empty(cAttr))
        cDOM+=" [attr="+cAttr+"]"
    endif

    // Content
    cContent:=::GetContent()
    if (!Empty(cContent).and.(cContent!=FWWEBEX_WEB_NULL_CONTENT))
        cDOM+=" [content="+cContent+"]"
    endif

    cDOM+=__cCRLF

    // Varre os filhos
    aChildren:=::jChildren:GetNames()
    for i:=1 to Len(aChildren)
        cKey:=aChildren[i]
        if (::jChildren:HasProperty(cKey))
            oChild:=::jChildren[cKey]
            if (;
                    (valType(oChild)=="O");
                    .and.;
                    MethIsMemberOf(oChild,"ISKINDOF",.T.);
                    .and.;
                    oChild:IsKindOf("WEBEXCONTROL",.T.);
            )
               cDOM+=oChild:DumpDOM(nLevel+1)
            endif
        endif
    next i
    FWFreeArray(@aChildren)

return(cDOM)
