/*

                 _                              _                  _
__      __  ___ | |__    __ _  _ __   _ __     | |_   ___    ___  | | ___
\ \ /\ / / / _ \| '_ \  / _` || '_ \ | '_ \    | __| / _ \  / _ \ | |/ __|
 \ V  V / |  __/| |_) || (_| || |_) || |_) | _ | |_ | (_) || (_) || |\__ \
  \_/\_/   \___||_.__/  \__,_|| .__/ | .__/ (_) \__| \___/  \___/ |_||___/
                              |_|    |_|
Released to Public Domain.
--------------------------------------------------------------------------------------
*/

namespace FWWebEx

#include "fw.webex.th"

#include "tlpp-core.th"
#include "tlpp-rest.th"

static __oTWebEngine as object
static __oTWebChannel as object

class WebApp

    static method ThemeIsDark(cTheme as character) as logical
    static method WebAgentIsConnected() as logical

    static method GetMimeType(cFile) as character

    static method GetTWebChannel(lConnect as logical) as object

    static method GetTWebEngine() as object
    static method SetTWebEngine(oTWebEngine as object) as logical

    static method GetRemoteOrigin() as character
    static method GetTotvsTecParams() as json
    static method ExtendUrlWithTotvsTecParams(cUrl as character) as character

    static method JSToAdvPL(oTWebChannel as object,cCodeType as character,cCodeContent as character) as variant

end class

static method ThemeIsDark(cTheme) class WebApp

    local lIsDark as logical

    local oError as object

    paramtype 1 var cTheme as character optional

    try
        cTheme:=Upper(allTrim(totvs.framework.css.getNewWebAppTheme()))
        lIsDark:=(!Empty(cTheme).and.(cTheme=="DARK"))
    catch oError
        lIsDark:=.F.
        FreeObj(@oError)
    endtry

return(lIsDark)

static method WebAgentIsConnected() class WebApp
    local aWebAgentInfo:=GetWebAgentInfo() as array
    local lWebAgentIsConnected as logical
    lWebAgentIsConnected:=((Len(aWebAgentInfo)>=2).and.(!Empty(aWebAgentInfo[1])))
return(lWebAgentIsConnected)

static method GetMimeType(cFile) class WebApp

    static __jMimeType:=JSONObject():New() as json

    local cSPPDrive as character
    local cSPPPath as character
    local cSPPFile as character
    local cSPPExt as character

    local cMimeType as character

    if (Empty(__jMimeType:GetNames()))
        __jMimeType[".7z"]:="application/x-7z-compressed"
        __jMimeType[".css"]:="text/css; charset=UTF-8"
        __jMimeType[".csv"]:="text/csv; charset=UTF-8"
        __jMimeType[".eot"]:="application/vnd.ms-fontobject"
        __jMimeType[".gif"]:="image/gif"
        __jMimeType[".htm"]:="text/html; charset=UTF-8"
        __jMimeType[".html"]:="text/html; charset=UTF-8"
        __jMimeType[".ico"]:="image/x-icon"
        __jMimeType[".jpeg"]:="image/jpeg"
        __jMimeType[".jpg"]:="image/jpeg"
        __jMimeType[".js"]:="application/javascript; charset=UTF-8"
        __jMimeType[".json"]:="application/json; charset=UTF-8"
        __jMimeType[".md"]:="text/markdown; charset=UTF-8"
        __jMimeType[".mp4"]:="video/mp4"
        __jMimeType[".odt"]:="application/vnd.oasis.opendocument.text"
        __jMimeType[".ogv"]:="video/ogg"
        __jMimeType[".otf"]:="font/otf"
        __jMimeType[".pdf"]:="application/pdf"
        __jMimeType[".png"]:="image/png"
        __jMimeType[".rar"]:="application/vnd.rar"
        __jMimeType[".svg"]:="image/svg+xml"
        __jMimeType[".tsv"]:="text/tab-separated-values; charset=UTF-8"
        __jMimeType[".ttf"]:="font/ttf"
        __jMimeType[".txt"]:="text/plain; charset=UTF-8"
        __jMimeType[".webm"]:="video/webm"
        __jMimeType[".webp"]:="image/webp"
        __jMimeType[".woff"]:="font/woff"
        __jMimeType[".woff2"]:="font/woff2"
        __jMimeType[".xls"]:="application/vnd.ms-excel"
        __jMimeType[".xlsx"]:="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        __jMimeType[".xml"]:="application/xml; charset=UTF-8"
        __jMimeType[".zip"]:="application/zip"
    endif

    SplitPath(cFile,@cSPPDrive,@cSPPPath,@cSPPFile,@cSPPExt)
    cSPPExt:=Lower(cSPPExt)
    if (__jMimeType:HasProperty(cSPPExt))
        cMimeType:=__jMimeType[cSPPExt]
    else
        cMimeType:="application/octet-stream"
    endif

return(cMimeType)

static method GetTWebChannel(lConnect) class WebApp
    local cTWebChannelType:=ValType(__oTWebChannel)
    paramtype 1 var lConnect as logical optional default .T.
    if (;
            (cTWebChannelType!="O");
            .or.;
            (;
                (cTWebChannelType=="O");
                .and.;
                (GetClassName(__oTWebChannel)!="TWEBCHANNEL");
            );
    )
        __oTWebChannel:=TWebChannel():New()
        if (lConnect)
            __oTWebChannel:Connect()
        endif
    elseif ((!__oTWebChannel:lConnected).and.(lConnect))
        __oTWebChannel:Connect()
    endif
return(__oTWebChannel)

static method GetTWebEngine() class WebApp
return(__oTWebEngine)

static method SetTWebEngine(oTWebEngine) class WebApp
    paramtype oTWebEngine as object class TWebEngine
    __oTWebEngine:=oTWebEngine
return(.T.)

//TODO: Utilizar a funcao padrao para retornar esta informacao
static method GetRemoteOrigin() class WebApp

    local cHost as character
    local cProtocol as character
    local cWebAppPort as character
    local cRemoteOrigin as character
    local cGetSrvIniName:=GetSrvIniName() as character

    local oTWebChannel:=WebApp():GetTWebChannel(.T.) as object

    cHost:=oTWebChannel:cHost
    cProtocol:=if((Upper(AllTrim(GetPvProfString("WEBAPP","SSLMethod","",cGetSrvIniName)))=="SSL/TLS"),"https","http")
    cWebAppPort:=GetPvProfString("WEBAPP","port","",cGetSrvIniName)

    cRemoteOrigin:=cProtocol
    cRemoteOrigin+="://"
    cRemoteOrigin+=cHost
    cRemoteOrigin+=":"
    cRemoteOrigin+=cWebAppPort

return(cRemoteOrigin)

static method GetTotvsTecParams() class WebApp

    local jParams:=JSONObject():New() as json

    local nRemoteType as numeric

    local oTWebChannel:=WebApp():GetTWebChannel(.T.) as object

    begin sequence

        // Garante que o canal esta conectado
        if !((ValType(oTWebChannel)=="O").and.(oTWebChannel:lConnected))
            __oTWebChannel:Connect()
            if (!oTWebChannel:lConnected)
                // Falha, retorna original
                break
            endif
        endif

        nRemoteType:=GetRemoteType()
        if (nRemoteType==1)
            nRemoteType:=5
        endif

        // Monta os parametros que normalmente o TWebEngine injeta
        jParams["totvstec_websocket_port"]:=LTrim(Str(oTWebChannel:nPort))
        jParams["totvstec_remote_type"]:=LTrim(Str(nRemoteType))
        jParams["totvstec_remote_origin"]:=WebApp():GetRemoteOrigin()

    end sequence

return(jParams)

static method ExtendUrlWithTotvsTecParams(cUrl) class WebApp

    local aParams as array

    local cSep:="?" as character
    local cParam as character
    local cNewUrl as character

    local jParams as json

    local i as numeric

    paramtype 1 var cUrl as character

    cNewUrl:=cUrl

    begin sequence

        // Monta os parametros que normalmente o TWebEngine injeta
        jParams:=WebApp():GetTotvsTecParams()
        if (Empty(jParams:GetNames()))
            break
        endif

        // Verifica se a URL ja tem parametros
        if ("?"$cUrl)
            cSep:="&"
        endif

        // Concatena os parametros
        aParams:=jParams:GetNames()
        for i:=1 to Len(aParams)
            cParam:=aParams[i]
            cNewUrl+=cSep+cParam+"="+jParams[cParam]
            if (cSep=="?")
                cSep:="&"
            endif
        next i
        FWFreeArray(@aParams)
        FreeObj(@jParams)

    end sequence

return(cNewUrl)

static method JSToAdvPL(oTWebChannel,cCodeType,cCodeContent) class WebApp

    local aCallBackAct as array

    local bCallBack as codeblock

    local cCallBackAct as character
    local cCallBackRet as character
    local cCallBackMsg as character
    local cResposeType as character
    local cCallBackType as character

    local jResponse as json
    local jCallBackRet as json

    local lTWebEngine as logical

    local nCallBackAct as numeric

    local oTWebEngine as object

    local xCallBackRet as variant

    paramtype oTWebChannel as object class TWEBCHANNEL
    paramtype cCodeType as character
    paramtype cCodeContent as character optional

    cCodeType:=Upper(AllTrim(cCodeType))
    bCallBack:=oTWebChannel:bSetGet

    cCallBackAct:=Upper(AllTrim(oTWebChannel:cMSG))
    aCallBackAct:=StrTokArr2(cCallBackAct,"|")
    aEval(aCallBackAct,{|cCallBackActRet as character,y as numeric|aCallBackAct[y]:=StrTokArr2(cCallBackActRet,":")})

    nCallBackAct:=aScan(;
        aCallBackAct;
       ,{|uCallBackActRet as variant|;
            cCodeType==if((ValType(uCallBackActRet)=="C"),uCallBackActRet,uCallBackActRet[1]);
        };
    )

    if (nCallBackAct>0)
        if (Len(aCallBackAct[nCallBackAct])>=2)
            cCallBackAct:=aCallBackAct[nCallBackAct][1]
            cCallBackRet:=aCallBackAct[nCallBackAct][2]
            if (Len(aCallBackAct[nCallBackAct])>=3)
                cCallBackMsg:=aCallBackAct[nCallBackAct][3]
            endif
        else
            cCallBackAct:=aCallBackAct[nCallBackAct][1]
            cCallBackRet:=cCallBackAct
        endif
    endif

    if (Empty(cCallBackMsg))
        cCallBackMsg:="Error: An unknown error occurred during processing in Protheus. No specific details were provided in the response. Please check the server logs or contact the system administrator for further investigation."
    endif

    oTWebEngine:=WebApp():GetTWebEngine()
    lTWebEngine:=(valType(oTWebEngine)=="O")

    do case
        case (cCodeType==cCallBackAct)
            ConOut(cCodeType,cCodeContent)
            cCallBackType:=valType(bCallBack)
            if (cCallBackType=="B")
                jResponse:=Eval(bCallBack,oTWebChannel,cCodeType,cCodeContent,aCallBackAct,oTWebEngine)
                cResposeType:=ValType(jResponse)
                if (;
                        (cResposeType=="J");
                        .and.;
                        (;
                            (!jResponse:HasProperty("lHasError"));
                            .or.;
                            (;
                                (ValType(jResponse["lHasError"])=="L");
                                .and.;
                                (!jResponse["lHasError"]);
                            );
                        );
                        .and.;
                        (jResponse:HasProperty("xContent"));
                )
                    xCallBackRet:=jResponse["xContent"]
                    cResposeType:=ValType(xCallBackRet)
                    do case
                        case (cResposeType=="J")
                            jCallBackRet:=xCallBackRet
                            xCallBackRet:=jCallBackRet:ToJSON()
                            FreeObj(@jCallBackRet)
                        otherwise
                            if (cResposeType!="C")
                                xCallBackRet:="Error: The data received in the callback is invalid or incompatible with JavaScript execution in the browser. Expected a valid JSON or JavaScript content, but received an incompatible type, such as a Protheus object, a logical value without context, or other non-executable data."
                            endif
                    end case
                    if (!cResposeType$"C|J")
                        if (lTWebEngine)
                            oTWebEngine:RunJavaScript('Alert("'+cCallBackAct+'", "'+xCallBackRet+'");')
                        endif
                    else
                        oTWebChannel:AdvPLToJS(cCallBackRet,xCallBackRet)
                    endif
                elseif (;
                        (lTWebEngine);
                        .and.;
                        (ValType(jResponse)=="J");
                        .and.;
                        (jResponse:HasProperty("lHasError"));
                        .and.;
                        (ValType(jResponse["lHasError"])=="L");
                        .and.;
                        (jResponse:HasProperty("xContent"));
                )
                    xCallBackRet:=jResponse:HasProperty("xContent")
                    cResposeType:=ValType(xCallBackRet)
                    do case
                        case (cResposeType=="J")
                            if xCallBackRet:HasProperty("cErrorMessage")
                                cCallBackMsg:=xCallBackRet["cErrorMessage"]
                            else
                                if (!Empty(cCallBackMsg))
                                    cCallBackMsg:="Error: An issue occurred during processing in Protheus, but no error message was provided. Please ensure that an ErrorMessage is included in the response to provide details about the failure."
                                endif
                            endif
                        otherwise
                            if (cResposeType!="C")
                                if (!Empty(cCallBackMsg))
                                    cCallBackMsg:="Error: An unknown error occurred during processing in Protheus. No specific details were provided in the response. Please check the server logs or contact the system administrator for further investigation."
                                endif
                            endif
                    end case
                    oTWebEngine:RunJavaScript('Alert("'+cCallBackAct+'", "'+cCallBackMsg+'");')
                elseif (lTWebEngine)
                    if (!Empty(cCallBackMsg))
                        cCallBackMsg:="Error: An unknown error occurred during processing in Protheus. No specific details were provided in the response. Please check the server logs or contact the system administrator for further investigation."
                    endif
                    oTWebEngine:RunJavaScript('Alert("'+cCallBackAct+'", "'+cCallBackMsg+'");')
                endif
            endif
        case (cCodeType=="CALLBACK_ALERT")
            if (lTWebEngine)
                oTWebEngine:RunJavaScript('Alert("'+cCallBackAct+'", "'+cCallBackMsg+'");')
            endif
        otherwise
            if (lTWebEngine)
                cCallBackMsg:="Error: No callback action was found in the list of actions for the requested operation. Please ensure a valid callback is registered to handle the response."
                oTWebEngine:RunJavaScript('Alert("'+cCallBackAct+'", "'+cCallBackMsg+'");')
            endif
    end case

    cResposeType:=valType(jResponse)
    if (cResposeType$"A|J")
        if (cResposeType=="A")
            FWFreeArray(@jResponse)
        else
            FreeObj(@jResponse)
        endif
    endif

    cCallBackType:=ValType(xCallBackRet)
    if (cCallBackType$"A|J")
        if (cCallBackType=="A")
            FWFreeArray(@xCallBackRet)
        else
            FreeObj(@xCallBackRet)
        endif
    endif

    FWFreeArray(@aCallBackAct)

return
