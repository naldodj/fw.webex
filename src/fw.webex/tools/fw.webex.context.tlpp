/*
  __                            _
 / _|__      ____      __  ___ | |__    ___ __  __
| |_ \ \ /\ / /\ \ /\ / / / _ \| '_ \  / _ \\ \/ /
|  _| \ V  V /  \ V  V / |  __/| |_) ||  __/ >  <
|_|    \_/\_/    \_/\_/   \___||_.__/  \___|/_/\_\

Released to Public Domain.
--------------------------------------------------------------------------------------
*/

namespace FWWebEx

static __aWithStack:=Array(0) as array
static __aFreeStack:=Array(0) as array

#include "fw.webex.th"

class WebExContext

    static method ObjBegin(oObject as object) as object
    static method ObjEnd(lAddChild as logical) as variant
    static method ObjGet() as object
    static method ObjClean() as variant

end class

method ObjBegin(oObject) class WebExContext
   paramtype 1 var oObject as object
   aAdd(__aWithStack,oObject)
   aAdd(__aFreeStack,oObject)
return(oObject)

method ObjEnd(lAddChild) class WebExContext
    local lWebExScript as logical
    local nLen:=Len(__aWithStack) as numeric
    local oChild as object
    local oParent as object
    paramtype 1 var lAddChild as logical optional default .T.
    if ((nLen>0).and.(ValType(__aWithStack[nLen])=="O"))
        oChild:=__aWithStack[nLen]
        lWebExScript:=(oChild:ClassName()=="WEBEXSCRIPT")
        lWebExScript:=((lWebExScript).and.(!oChild:GetScriptUseAddChild()))
        if (lWebExScript)
            oChild:AddScript(oChild)
        endif
        __aWithStack[nLen]:=nil
        aDel(__aWithStack,nLen)
        aSize(__aWithStack,--nLen)
        if (nLen>0)
            oParent:=__aWithStack[nLen]
            if ((lAddChild).and.(!lWebExScript).and.(oParent!=oChild))
                oParent:AddChild(oChild)
            endif
        else
            oParent:=oChild
        endif
        oChild:=nil
    endif
return(oParent)

method ObjGet() class WebExContext
    local nLen:=Len(__aWithStack) as numeric
    local oObj as object
    if (nLen>0)
        oObj:=__aWithStack[nLen]
    endif
return(oObj)

static method ObjClean() class WebExContext
    aEval(__aFreeStack,{|o|if(ValType(o)=="O",(o:Clean(),FreeObj(@o)),nil)})
    aSize(__aFreeStack,0)
return
