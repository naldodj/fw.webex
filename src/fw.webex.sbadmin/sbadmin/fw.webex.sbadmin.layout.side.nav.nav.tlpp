/*

  __                            _                          _                 _             _
 / _|__      ____      __  ___ | |__    ___ __  __    ___ | |__    __ _   __| | _ __ ___  (_) _ __
| |_ \ \ /\ / /\ \ /\ / / / _ \| '_ \  / _ \\ \/ /   / __|| '_ \  / _` | / _` || '_ ` _ \ | || '_ \
|  _| \ V  V /  \ V  V / |  __/| |_) ||  __/ >  <  _ \__ \| |_) || (_| || (_| || | | | | || || | | |
|_|    \_/\_/    \_/\_/   \___||_.__/  \___|/_/\_\(_)|___/|_.__/  \__,_| \__,_||_| |_| |_||_||_| |_|

Released to Public Domain.
--------------------------------------------------------------------------------------
*/

namespace FWWebEx

#include "fw.webex.th"

class SBAdminLayoutSideNavNav from WebExControl

    protected data jSBAdminNavMenu as json

    protected data oNav as object
    protected data oNavDiv as object
    protected data oNavFooter as object
    protected data oMenuContainer as object

    protected data oSideNavFooter as object
    protected data oSideNavFooterDiv as object

    public method New() as object

    public method NavLoadJSONMenu(jSBAdminNavMenu as json) as object

    protected method BuildSideNav() as object
    protected method BuildSideNavFooder() as object
    protected method RenderMenuItems(aMenu as array) as object
    protected method RenderItem(jMenuItem as json,cParentID as character,nDepth as numeric,aRolesUser as array) as object

    protected method NavMenuAddBadge(oSBAdminMenuItem) as object
    protected method NavMenuAddDivider(oSBAdminMenuItem) as object

endclass

method New() class SBAdminLayoutSideNavNav
    _Super:New("div")
    ::SetFixedID("layoutSidenav_nav")
    ::AddChild(::BuildSideNav())
return(self)

method NavLoadJSONMenu(jSBAdminNavMenu) class SBAdminLayoutSideNavNav

    local aMenus as array

    paramtype 1 var jSBAdminNavMenu as json

    ::jSBAdminNavMenu:=jSBAdminNavMenu

    if (jSBAdminNavMenu:HasProperty("menu"))
        aMenus:=jSBAdminNavMenu["menu"]
        if (Len(aMenus)>0)
            WITH WEBEXOBJECT ::oNavDiv
                ::RenderMenuItems(aMenus)
            END WEBEXOBJECT NOADDCHILD
        endif
    endif

return(self)

method BuildSideNav() class SBAdminLayoutSideNavNav

    ::oNav:=WebExNav():New()
    ::oNav:AddClass("sb-sidenav accordion sb-sidenav-dark")
    ::oNav:SetFixedID("sidenavAccordion")

    ::oMenuContainer:=WebExDiv():New()
    ::oMenuContainer:AddClass("sb-sidenav-menu")

    ::oNavDiv:=WebExDiv():New()
    ::oNavDiv:AddClass("nav")

    ::oMenuContainer:AddChild(::oNavDiv)
    ::oNav:AddChild(::oMenuContainer)

    ::BuildSideNavFooder()

return(::oNav)

method BuildSideNavFooder() class SBAdminLayoutSideNavNav

    WITH WEBEXOBJECT ::oNav
        WITH WEBEXOBJECT ::oSideNavFooter CLASS WebExDiv
            .:AddClass("sb-sidenav-footer")
            WITH WEBEXOBJECT ::oSideNavFooterDiv CLASS WebExDiv
                .:AddClass("small")
                .:SetContent("")
            END WEBEXOBJECT
            .:SetContent("FWWebEx",::oSideNavFooterDiv:GetID())
        END WEBEXOBJECT
    END WEBEXOBJECT NOADDCHILD

return(self)

method RenderMenuItems(aMenu) class SBAdminLayoutSideNavNav
    local aRolesUser as array
    local i as numeric
    local oContainer as object
    paramtype 1 var aMenu as array
    oContainer:=WebExDiv():New()
    for i:=1 to Len(aMenu)
        if ((aMenu[i]:HasProperty("divider")).and.(aMenu[i]["divider"]))
            ::NavMenuAddDivider(@oContainer)
            loop
        endif
        oContainer:AddChild(::RenderItem(aMenu[i],"sidenavAccordion",1,@aRolesUser))
    next i
    ::oNavDiv:AddChild(oContainer)
return(self)

method RenderItem(jMenuItem,cParentID,nDepth,aRolesUser) class SBAdminLayoutSideNavNav

    local cCollapseID as character

    local lHasSubMenu as logical

    local i as numeric

    local oWrapper as object
    local oCollapse as object
    local oIconWrap as object
    local oNestedNav as object
    local oWebExAnchor as object
    local oWebExAnchorIcon as object

    paramtype jMenuItem as json
    paramtype cParentID as character
    paramtype nDepth as numeric
    paramtype aRolesUser as array optional

    if ((jMenuItem:HasProperty("heading")).and.(jMenuItem["heading"]).and.(jMenuItem:HasProperty("label")))
        oWrapper:=WebExDiv():New()
        oWrapper:AddClass("sb-sidenav-menu-heading")
        oWrapper:SetContent(jMenuItem["label"])
        if (jMenuItem:HasProperty("badge"))
            ::NavMenuAddBadge(@oWrapper,jMenuItem)
        endif
        return(oWrapper)
    endif

    if ((jMenuItem:HasProperty("roles")).and.(!WebExUser():ShouldDisplayItem(jMenuItem["roles"],@aRolesUser)))
        oWrapper:=WebExSpan():New()
        return(oWrapper)
    endif

    lHasSubMenu:=jMenuItem:HasProperty("subItems").and.(Len(jMenuItem["subItems"])>0)
    cCollapseID:="collapse_"+if(jMenuItem:HasProperty("id"),jMenuItem["id"],::NewID())

    oWebExAnchor:=WebExAnchor():New()
    oWebExAnchor:AddClass("nav-link")
    if (jMenuItem:HasProperty("id"))
        oWebExAnchor:SetFixedID(if(Empty(jMenuItem["id"]),cCollapseID,jMenuItem["id"]))
    else
        oWebExAnchor:SetFixedID(cCollapseID)
    endif
    if (lHasSubMenu)
        oWebExAnchor:SetAttr("href","#!")
        oWebExAnchor:AddClass("collapsed")
        oWebExAnchor:SetAttr("data-bs-toggle","collapse")
        oWebExAnchor:SetAttr("data-bs-target","#"+cCollapseID)
        oWebExAnchor:SetAttr("aria-expanded","false")
        oWebExAnchor:SetAttr("aria-controls",cCollapseID)
    elseif (jMenuItem:HasProperty("wsAction"))
        oWebExAnchor:SetAttr("href","#!")
        oWebExAnchor:SetAttr("data-wsurl",if(jMenuItem:HasProperty("url"),jMenuItem["url"],"#"))
        oWebExAnchor:SetAttr("data-wsaction",Encode64(jMenuItem["wsAction"]:ToJSON()))
    else
        oWebExAnchor:SetAttr("href",if(jMenuItem:HasProperty("url"),jMenuItem["url"],"#"))
    endif

    // Icone
    if ((jMenuItem:HasProperty("icon").and.(!Empty(jMenuItem["icon"]))))
        oIconWrap:=WebExDiv():New()
        oIconWrap:AddClass("sb-nav-link-icon")
        oIconWrap:AddChild(WebExIcon():New(jMenuItem["icon"],"fontawesome"))
        oWebExAnchor:AddChild(oIconWrap)
        oWebExAnchor:SetContent(jMenuItem["label"],oIconWrap:GetID())
    else
        oWebExAnchor:SetContent(jMenuItem["label"])
    endif

    if (jMenuItem:HasProperty("badge"))
        ::NavMenuAddBadge(@oWebExAnchor,jMenuItem)
    endif

    oWrapper:=WebExDiv():New()
    oWrapper:AddClass("nav-item")
    oWrapper:AddChild(oWebExAnchor)
    if (lHasSubMenu)

        WITH WEBEXOBJECT oWebExAnchor
            WITH WEBEXOBJECT CLASS WebExDiv
                .:AddClass("sb-sidenav-collapse-arrow")
                WITH WEBEXOBJECT oWebExAnchorIcon CLASS WebExIcon ARGS "fas fa-angle-down","fontawesome",.F.
                END WEBEXOBJECT
            END WEBEXOBJECT
        END WEBEXOBJECT NOADDCHILD

        oCollapse:=WebExDiv():New()
        oCollapse:AddClass("collapse")
        oCollapse:SetFixedID(cCollapseID)
        oCollapse:SetAttr("data-bs-parent","#"+cParentID)

        oNestedNav:=WebExNav():New()
        oNestedNav:AddClass("sb-sidenav-menu-nested nav")

        for i:=1 to Len(jMenuItem["subItems"])
            if ((jMenuItem["subItems"][i]:HasProperty("divider")).and.(jMenuItem["subItems"][i]["divider"]))
                ::NavMenuAddDivider(@oNestedNav)
                loop
            endif
            oNestedNav:AddChild(::RenderItem(jMenuItem["subItems"][i],cCollapseID,nDepth+1,@aRolesUser))
        next i

        oCollapse:AddChild(oNestedNav)
        oWrapper:AddChild(oCollapse)

    endif

return(oWrapper)

method NavMenuAddBadge(oSBAdminMenuItem,jMenuItem) class SBAdminLayoutSideNavNav
    paramtype 1 var oSBAdminMenuItem as object class WebExDiv,WebExAnchor
    paramtype 2 var jMenuItem as json
    WITH WEBEXOBJECT oSBAdminMenuItem
        if (jMenuItem:HasProperty("badge")).and.(jMenuItem["badge"]:HasProperty("label").and.(!Empty(jMenuItem["badge"]["label"])))
            WITH WEBEXOBJECT CLASS WebExSpan
                .:SetContent(jMenuItem["badge"]["label"])
                .:AddClass("badge rounded-pill ms-1 fw-light border border-secondary text-dark ms-2")
                if ((jMenuItem["badge"]:HasProperty("class")).and.(!Empty(jMenuItem["badge"]["class"])))
                    .:AddClass(jMenuItem["badge"]["class"])
                endif
            END WEBEXOBJECT
        endif
    END WEBEXOBJECT NOADDCHILD
return(self)

method NavMenuAddDivider(oSBAdminMenuItem) class SBAdminLayoutSideNavNav
    paramtype 1 var oSBAdminMenuItem as object class WebExDiv,WebExNav
    WITH WEBEXOBJECT oSBAdminMenuItem
        WITH WEBEXOBJECT CLASS WebExHR
            .:DelAllAttr()
            .:SetAttr("class","dropdown-divider my-2 border-top")
        END WEBEXOBJECT
    END WEBEXOBJECT NOADDCHILD
return(self)
